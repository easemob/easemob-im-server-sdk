#!/usr/bin/env bash
#
# im Bash Completion
# =======================
#
# Bash completion support for the `im` command,
# generated by [picocli](http://picocli.info/) version 4.6.1.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `im [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'im (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_im finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_im() {
  local cmds0=(create)
  local cmds1=(get)
  local cmds2=(delete)
  local cmds3=(update)
  local cmds4=(create admin)
  local cmds5=(create attachment)
  local cmds6=(create block)
  local cmds7=(create contact)
  local cmds8=(create group)
  local cmds9=(create member)
  local cmds10=(create message)
  local cmds11=(create room)
  local cmds12=(create user)
  local cmds13=(get admin)
  local cmds14=(get attachment)
  local cmds15=(get block)
  local cmds16=(get contact)
  local cmds17=(get group)
  local cmds18=(get member)
  local cmds19=(get message)
  local cmds20=(get room)
  local cmds21=(get session)
  local cmds22=(get user)
  local cmds23=(delete admin)
  local cmds24=(delete block)
  local cmds25=(delete contact)
  local cmds26=(delete group)
  local cmds27=(delete member)
  local cmds28=(delete room)
  local cmds29=(delete session)
  local cmds30=(delete user)
  local cmds31=(update group)
  local cmds32=(update user)
  local cmds33=(update room)

  if CompWordsContainsArray "${cmds33[@]}"; then _picocli_im_update_room; return $?; fi
  if CompWordsContainsArray "${cmds32[@]}"; then _picocli_im_update_user; return $?; fi
  if CompWordsContainsArray "${cmds31[@]}"; then _picocli_im_update_group; return $?; fi
  if CompWordsContainsArray "${cmds30[@]}"; then _picocli_im_delete_user; return $?; fi
  if CompWordsContainsArray "${cmds29[@]}"; then _picocli_im_delete_session; return $?; fi
  if CompWordsContainsArray "${cmds28[@]}"; then _picocli_im_delete_room; return $?; fi
  if CompWordsContainsArray "${cmds27[@]}"; then _picocli_im_delete_member; return $?; fi
  if CompWordsContainsArray "${cmds26[@]}"; then _picocli_im_delete_group; return $?; fi
  if CompWordsContainsArray "${cmds25[@]}"; then _picocli_im_delete_contact; return $?; fi
  if CompWordsContainsArray "${cmds24[@]}"; then _picocli_im_delete_block; return $?; fi
  if CompWordsContainsArray "${cmds23[@]}"; then _picocli_im_delete_admin; return $?; fi
  if CompWordsContainsArray "${cmds22[@]}"; then _picocli_im_get_user; return $?; fi
  if CompWordsContainsArray "${cmds21[@]}"; then _picocli_im_get_session; return $?; fi
  if CompWordsContainsArray "${cmds20[@]}"; then _picocli_im_get_room; return $?; fi
  if CompWordsContainsArray "${cmds19[@]}"; then _picocli_im_get_message; return $?; fi
  if CompWordsContainsArray "${cmds18[@]}"; then _picocli_im_get_member; return $?; fi
  if CompWordsContainsArray "${cmds17[@]}"; then _picocli_im_get_group; return $?; fi
  if CompWordsContainsArray "${cmds16[@]}"; then _picocli_im_get_contact; return $?; fi
  if CompWordsContainsArray "${cmds15[@]}"; then _picocli_im_get_block; return $?; fi
  if CompWordsContainsArray "${cmds14[@]}"; then _picocli_im_get_attachment; return $?; fi
  if CompWordsContainsArray "${cmds13[@]}"; then _picocli_im_get_admin; return $?; fi
  if CompWordsContainsArray "${cmds12[@]}"; then _picocli_im_create_user; return $?; fi
  if CompWordsContainsArray "${cmds11[@]}"; then _picocli_im_create_room; return $?; fi
  if CompWordsContainsArray "${cmds10[@]}"; then _picocli_im_create_message; return $?; fi
  if CompWordsContainsArray "${cmds9[@]}"; then _picocli_im_create_member; return $?; fi
  if CompWordsContainsArray "${cmds8[@]}"; then _picocli_im_create_group; return $?; fi
  if CompWordsContainsArray "${cmds7[@]}"; then _picocli_im_create_contact; return $?; fi
  if CompWordsContainsArray "${cmds6[@]}"; then _picocli_im_create_block; return $?; fi
  if CompWordsContainsArray "${cmds5[@]}"; then _picocli_im_create_attachment; return $?; fi
  if CompWordsContainsArray "${cmds4[@]}"; then _picocli_im_create_admin; return $?; fi
  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_im_update; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_im_delete; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_im_get; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_im_create; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_im; return $?;
}

# Generates completions for the options and subcommands of the `im` command.
function _picocli_im() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="create get delete update"
  local flag_opts="-v --verbose -h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `create` subcommand.
function _picocli_im_create() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="admin attachment block contact group member message room user"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `get` subcommand.
function _picocli_im_get() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="admin attachment block contact group member message room session user"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `delete` subcommand.
function _picocli_im_delete() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="admin block contact group member room session user"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `update` subcommand.
function _picocli_im_update() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands="group user room"
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `admin` subcommand.
function _picocli_im_create_admin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --super"
  local arg_opts="--group --room"

  compopt +o default

  case ${prev_word} in
    --group)
      return
      ;;
    --room)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `attachment` subcommand.
function _picocli_im_create_attachment() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-f"

  compopt +o default

  case ${prev_word} in
    -f)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `block` subcommand.
function _picocli_im_create_block() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --login"
  local arg_opts="--msg-to-user --msg-to-group --msg-to-room --join-group --join-room --duration"

  compopt +o default

  case ${prev_word} in
    --msg-to-user)
      return
      ;;
    --msg-to-group)
      return
      ;;
    --msg-to-room)
      return
      ;;
    --join-group)
      return
      ;;
    --join-room)
      return
      ;;
    --duration)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contact` subcommand.
function _picocli_im_create_contact() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group` subcommand.
function _picocli_im_create_group() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --private --can-member-invite"
  local arg_opts="--owner --name --description --max-members"

  compopt +o default

  case ${prev_word} in
    --owner)
      return
      ;;
    --name)
      return
      ;;
    --description)
      return
      ;;
    --max-members)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `member` subcommand.
function _picocli_im_create_member() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--to-group --to-room"

  compopt +o default

  case ${prev_word} in
    --to-group)
      return
      ;;
    --to-room)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `message` subcommand.
function _picocli_im_create_message() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--from --to-user --to-group --to-room --text --img --audio --video --loc --file --cmd --custom --secret --filename --bytes --duration --ext --param"

  compopt +o default

  case ${prev_word} in
    --from)
      return
      ;;
    --to-user)
      return
      ;;
    --to-group)
      return
      ;;
    --to-room)
      return
      ;;
    --text)
      return
      ;;
    --img)
      return
      ;;
    --audio)
      return
      ;;
    --video)
      return
      ;;
    --loc)
      return
      ;;
    --file)
      return
      ;;
    --cmd)
      return
      ;;
    --custom)
      return
      ;;
    --secret)
      return
      ;;
    --filename)
      return
      ;;
    --bytes)
      return
      ;;
    --duration)
      return
      ;;
    --ext)
      return
      ;;
    --param)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `room` subcommand.
function _picocli_im_create_room() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--name --owner --description --max-members"

  compopt +o default

  case ${prev_word} in
    --name)
      return
      ;;
    --owner)
      return
      ;;
    --description)
      return
      ;;
    --max-members)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `user` subcommand.
function _picocli_im_create_user() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `admin` subcommand.
function _picocli_im_get_admin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --super"
  local arg_opts="--group --room"

  compopt +o default

  case ${prev_word} in
    --group)
      return
      ;;
    --room)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `attachment` subcommand.
function _picocli_im_get_attachment() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="-o"

  compopt +o default

  case ${prev_word} in
    -o)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `block` subcommand.
function _picocli_im_get_block() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --login"
  local arg_opts="--msg-to-user --msg-to-group --msg-to-room --join-group --join-room"

  compopt +o default

  case ${prev_word} in
    --msg-to-user)
      return
      ;;
    --msg-to-group)
      return
      ;;
    --msg-to-room)
      return
      ;;
    --join-group)
      return
      ;;
    --join-room)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contact` subcommand.
function _picocli_im_get_contact() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group` subcommand.
function _picocli_im_get_group() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--have-user --limit --cursor"

  compopt +o default

  case ${prev_word} in
    --have-user)
      return
      ;;
    --limit)
      return
      ;;
    --cursor)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `member` subcommand.
function _picocli_im_get_member() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--group --room --limit --cursor"

  compopt +o default

  case ${prev_word} in
    --group)
      return
      ;;
    --room)
      return
      ;;
    --limit)
      return
      ;;
    --cursor)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `message` subcommand.
function _picocli_im_get_message() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --history --count --missed"
  local arg_opts="--status -o --user"

  compopt +o default

  case ${prev_word} in
    --status)
      return
      ;;
    -o)
      compopt -o filenames
      COMPREPLY=( $( compgen -f -- "${curr_word}" ) ) # files
      return $?
      ;;
    --user)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `room` subcommand.
function _picocli_im_get_room() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--have-user --limit --cursor"

  compopt +o default

  case ${prev_word} in
    --have-user)
      return
      ;;
    --limit)
      return
      ;;
    --cursor)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_im_get_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `user` subcommand.
function _picocli_im_get_user() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--limit --cursor"

  compopt +o default

  case ${prev_word} in
    --limit)
      return
      ;;
    --cursor)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `admin` subcommand.
function _picocli_im_delete_admin() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--group --room --super"

  compopt +o default

  case ${prev_word} in
    --group)
      return
      ;;
    --room)
      return
      ;;
    --super)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `block` subcommand.
function _picocli_im_delete_block() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --login"
  local arg_opts="--msg-to-user --msg-to-group --msg-to-room --join-group --join-room"

  compopt +o default

  case ${prev_word} in
    --msg-to-user)
      return
      ;;
    --msg-to-group)
      return
      ;;
    --msg-to-room)
      return
      ;;
    --join-group)
      return
      ;;
    --join-room)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `contact` subcommand.
function _picocli_im_delete_contact() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group` subcommand.
function _picocli_im_delete_group() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `member` subcommand.
function _picocli_im_delete_member() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--from-group --from-room"

  compopt +o default

  case ${prev_word} in
    --from-group)
      return
      ;;
    --from-room)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `room` subcommand.
function _picocli_im_delete_room() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `session` subcommand.
function _picocli_im_delete_session() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--device"

  compopt +o default

  case ${prev_word} in
    --device)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `user` subcommand.
function _picocli_im_delete_user() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}

  local commands=""
  local flag_opts="-h --help -V --version --all"
  local arg_opts=""

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `group` subcommand.
function _picocli_im_update_group() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version --can-member-invite"
  local arg_opts="--owner --name --description --announcement --max-members"

  compopt +o default

  case ${prev_word} in
    --owner)
      return
      ;;
    --name)
      return
      ;;
    --description)
      return
      ;;
    --announcement)
      return
      ;;
    --max-members)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `user` subcommand.
function _picocli_im_update_user() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--password"

  compopt +o default

  case ${prev_word} in
    --password)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `room` subcommand.
function _picocli_im_update_room() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="-h --help -V --version"
  local arg_opts="--name --description --max-members"

  compopt +o default

  case ${prev_word} in
    --name)
      return
      ;;
    --description)
      return
      ;;
    --max-members)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `im`, `im.sh`, and `im.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_im` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_im -o default im im.sh im.bash
