/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiCallback;
import com.easemob.im.ApiClient;
import com.easemob.im.ApiException;
import com.easemob.im.ApiResponse;
import com.easemob.im.Configuration;
import com.easemob.im.Pair;
import com.easemob.im.ProgressRequestBody;
import com.easemob.im.ProgressResponseBody;

import com.easemob.im.api.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for importChatGroupMessage
     * @param emImportChatGroupMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call importChatGroupMessageCall(EMImportChatGroupMessage emImportChatGroupMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emImportChatGroupMessage;

        // create path and map variables
        String localVarPath = "/messages/chatgroups/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importChatGroupMessageValidateBeforeCall(EMImportChatGroupMessage emImportChatGroupMessage, final ApiCallback _callback) throws ApiException {
        return importChatGroupMessageCall(emImportChatGroupMessage, _callback);

    }

    /**
     * 导入群聊消息
     * 你可以在数据迁移时导入群聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E7%BE%A4%E8%81%8A%E6%B6%88%E6%81%AF
     * @param emImportChatGroupMessage  (optional)
     * @return EMImportChatGroupMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMImportChatGroupMessageResult importChatGroupMessage(EMImportChatGroupMessage emImportChatGroupMessage) throws ApiException {
        ApiResponse<EMImportChatGroupMessageResult> localVarResp = importChatGroupMessageWithHttpInfo(emImportChatGroupMessage);
        return localVarResp.getData();
    }

    /**
     * 导入群聊消息
     * 你可以在数据迁移时导入群聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E7%BE%A4%E8%81%8A%E6%B6%88%E6%81%AF
     * @param emImportChatGroupMessage  (optional)
     * @return ApiResponse&lt;EMImportChatGroupMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMImportChatGroupMessageResult> importChatGroupMessageWithHttpInfo(EMImportChatGroupMessage emImportChatGroupMessage) throws ApiException {
        okhttp3.Call localVarCall = importChatGroupMessageValidateBeforeCall(emImportChatGroupMessage, null);
        Type localVarReturnType = new TypeToken<EMImportChatGroupMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 导入群聊消息 (asynchronously)
     * 你可以在数据迁移时导入群聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E7%BE%A4%E8%81%8A%E6%B6%88%E6%81%AF
     * @param emImportChatGroupMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call importChatGroupMessageAsync(EMImportChatGroupMessage emImportChatGroupMessage, final ApiCallback<EMImportChatGroupMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = importChatGroupMessageValidateBeforeCall(emImportChatGroupMessage, _callback);
        Type localVarReturnType = new TypeToken<EMImportChatGroupMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for importChatUserMessage
     * @param emImportChatUserMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call importChatUserMessageCall(EMImportChatUserMessage emImportChatUserMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emImportChatUserMessage;

        // create path and map variables
        String localVarPath = "/messages/users/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importChatUserMessageValidateBeforeCall(EMImportChatUserMessage emImportChatUserMessage, final ApiCallback _callback) throws ApiException {
        return importChatUserMessageCall(emImportChatUserMessage, _callback);

    }

    /**
     * 导入单聊消息
     * 你可以在数据迁移时导入单聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E5%8D%95%E8%81%8A%E6%B6%88%E6%81%AF
     * @param emImportChatUserMessage  (optional)
     * @return EMImportChatUserMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMImportChatUserMessageResult importChatUserMessage(EMImportChatUserMessage emImportChatUserMessage) throws ApiException {
        ApiResponse<EMImportChatUserMessageResult> localVarResp = importChatUserMessageWithHttpInfo(emImportChatUserMessage);
        return localVarResp.getData();
    }

    /**
     * 导入单聊消息
     * 你可以在数据迁移时导入单聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E5%8D%95%E8%81%8A%E6%B6%88%E6%81%AF
     * @param emImportChatUserMessage  (optional)
     * @return ApiResponse&lt;EMImportChatUserMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMImportChatUserMessageResult> importChatUserMessageWithHttpInfo(EMImportChatUserMessage emImportChatUserMessage) throws ApiException {
        okhttp3.Call localVarCall = importChatUserMessageValidateBeforeCall(emImportChatUserMessage, null);
        Type localVarReturnType = new TypeToken<EMImportChatUserMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 导入单聊消息 (asynchronously)
     * 你可以在数据迁移时导入单聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E5%8D%95%E8%81%8A%E6%B6%88%E6%81%AF
     * @param emImportChatUserMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call importChatUserMessageAsync(EMImportChatUserMessage emImportChatUserMessage, final ApiCallback<EMImportChatUserMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = importChatUserMessageValidateBeforeCall(emImportChatUserMessage, _callback);
        Type localVarReturnType = new TypeToken<EMImportChatUserMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oneWayDeleteConversation
     * @param username 要删除会话的用户的唯一标识符，即用户 ID (required)
     * @param emOneWayDeleteConversation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayDeleteConversationCall(String username, EMOneWayDeleteConversation emOneWayDeleteConversation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emOneWayDeleteConversation;

        // create path and map variables
        String localVarPath = "/users/{username}/user_channel"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneWayDeleteConversationValidateBeforeCall(String username, EMOneWayDeleteConversation emOneWayDeleteConversation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling oneWayDeleteConversation(Async)");
        }

        return oneWayDeleteConversationCall(username, emOneWayDeleteConversation, _callback);

    }

    /**
     * 单向删除会话
     * 该方法使聊天用户能够从服务器中删除会话。删除会话后，该用户将从服务器获取不到该会话。该会话的其他参与聊天用户仍然可以从服务器获取会话内容。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E5%8D%95%E5%90%91%E5%88%A0%E9%99%A4%E4%BC%9A%E8%AF%9D
     * @param username 要删除会话的用户的唯一标识符，即用户 ID (required)
     * @param emOneWayDeleteConversation  (optional)
     * @return EMOneWayDeleteConversationResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMOneWayDeleteConversationResult oneWayDeleteConversation(String username, EMOneWayDeleteConversation emOneWayDeleteConversation) throws ApiException {
        ApiResponse<EMOneWayDeleteConversationResult> localVarResp = oneWayDeleteConversationWithHttpInfo(username, emOneWayDeleteConversation);
        return localVarResp.getData();
    }

    /**
     * 单向删除会话
     * 该方法使聊天用户能够从服务器中删除会话。删除会话后，该用户将从服务器获取不到该会话。该会话的其他参与聊天用户仍然可以从服务器获取会话内容。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E5%8D%95%E5%90%91%E5%88%A0%E9%99%A4%E4%BC%9A%E8%AF%9D
     * @param username 要删除会话的用户的唯一标识符，即用户 ID (required)
     * @param emOneWayDeleteConversation  (optional)
     * @return ApiResponse&lt;EMOneWayDeleteConversationResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMOneWayDeleteConversationResult> oneWayDeleteConversationWithHttpInfo(String username, EMOneWayDeleteConversation emOneWayDeleteConversation) throws ApiException {
        okhttp3.Call localVarCall = oneWayDeleteConversationValidateBeforeCall(username, emOneWayDeleteConversation, null);
        Type localVarReturnType = new TypeToken<EMOneWayDeleteConversationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 单向删除会话 (asynchronously)
     * 该方法使聊天用户能够从服务器中删除会话。删除会话后，该用户将从服务器获取不到该会话。该会话的其他参与聊天用户仍然可以从服务器获取会话内容。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E5%8D%95%E5%90%91%E5%88%A0%E9%99%A4%E4%BC%9A%E8%AF%9D
     * @param username 要删除会话的用户的唯一标识符，即用户 ID (required)
     * @param emOneWayDeleteConversation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayDeleteConversationAsync(String username, EMOneWayDeleteConversation emOneWayDeleteConversation, final ApiCallback<EMOneWayDeleteConversationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = oneWayDeleteConversationValidateBeforeCall(username, emOneWayDeleteConversation, _callback);
        Type localVarReturnType = new TypeToken<EMOneWayDeleteConversationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recallMessage
     * @param emRecallMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call recallMessageCall(EMRecallMessage emRecallMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emRecallMessage;

        // create path and map variables
        String localVarPath = "/messages/msg_recall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recallMessageValidateBeforeCall(EMRecallMessage emRecallMessage, final ApiCallback _callback) throws ApiException {
        return recallMessageCall(emRecallMessage, _callback);

    }

    /**
     * 撤回消息
     * 发送方可以撤回一条发送成功的消息。默认情况下，发送方可撤回发出 2 分钟内的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E6%92%A4%E5%9B%9E%E6%B6%88%E6%81%AF
     * @param emRecallMessage  (optional)
     * @return EMRecallMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMRecallMessageResult recallMessage(EMRecallMessage emRecallMessage) throws ApiException {
        ApiResponse<EMRecallMessageResult> localVarResp = recallMessageWithHttpInfo(emRecallMessage);
        return localVarResp.getData();
    }

    /**
     * 撤回消息
     * 发送方可以撤回一条发送成功的消息。默认情况下，发送方可撤回发出 2 分钟内的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E6%92%A4%E5%9B%9E%E6%B6%88%E6%81%AF
     * @param emRecallMessage  (optional)
     * @return ApiResponse&lt;EMRecallMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMRecallMessageResult> recallMessageWithHttpInfo(EMRecallMessage emRecallMessage) throws ApiException {
        okhttp3.Call localVarCall = recallMessageValidateBeforeCall(emRecallMessage, null);
        Type localVarReturnType = new TypeToken<EMRecallMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 撤回消息 (asynchronously)
     * 发送方可以撤回一条发送成功的消息。默认情况下，发送方可撤回发出 2 分钟内的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E6%92%A4%E5%9B%9E%E6%B6%88%E6%81%AF
     * @param emRecallMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call recallMessageAsync(EMRecallMessage emRecallMessage, final ApiCallback<EMRecallMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = recallMessageValidateBeforeCall(emRecallMessage, _callback);
        Type localVarReturnType = new TypeToken<EMRecallMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessagesToGroup
     * @param emCreateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call sendMessagesToGroupCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateMessage;

        // create path and map variables
        String localVarPath = "/messages/chatgroups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessagesToGroupValidateBeforeCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        return sendMessagesToGroupCall(emCreateMessage, _callback);

    }

    /**
     * 发送群聊消息
     * 向群组发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_group.html
     * @param emCreateMessage  (optional)
     * @return EMSendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSendMessageResult sendMessagesToGroup(EMCreateMessage emCreateMessage) throws ApiException {
        ApiResponse<EMSendMessageResult> localVarResp = sendMessagesToGroupWithHttpInfo(emCreateMessage);
        return localVarResp.getData();
    }

    /**
     * 发送群聊消息
     * 向群组发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_group.html
     * @param emCreateMessage  (optional)
     * @return ApiResponse&lt;EMSendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSendMessageResult> sendMessagesToGroupWithHttpInfo(EMCreateMessage emCreateMessage) throws ApiException {
        okhttp3.Call localVarCall = sendMessagesToGroupValidateBeforeCall(emCreateMessage, null);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送群聊消息 (asynchronously)
     * 向群组发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_group.html
     * @param emCreateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call sendMessagesToGroupAsync(EMCreateMessage emCreateMessage, final ApiCallback<EMSendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessagesToGroupValidateBeforeCall(emCreateMessage, _callback);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessagesToRoom
     * @param emCreateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call sendMessagesToRoomCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateMessage;

        // create path and map variables
        String localVarPath = "/messages/chatrooms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessagesToRoomValidateBeforeCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        return sendMessagesToRoomCall(emCreateMessage, _callback);

    }

    /**
     * 发送聊天室消息
     * 向聊天室发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_chatroom.html
     * @param emCreateMessage  (optional)
     * @return EMSendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSendMessageResult sendMessagesToRoom(EMCreateMessage emCreateMessage) throws ApiException {
        ApiResponse<EMSendMessageResult> localVarResp = sendMessagesToRoomWithHttpInfo(emCreateMessage);
        return localVarResp.getData();
    }

    /**
     * 发送聊天室消息
     * 向聊天室发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_chatroom.html
     * @param emCreateMessage  (optional)
     * @return ApiResponse&lt;EMSendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSendMessageResult> sendMessagesToRoomWithHttpInfo(EMCreateMessage emCreateMessage) throws ApiException {
        okhttp3.Call localVarCall = sendMessagesToRoomValidateBeforeCall(emCreateMessage, null);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送聊天室消息 (asynchronously)
     * 向聊天室发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_chatroom.html
     * @param emCreateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call sendMessagesToRoomAsync(EMCreateMessage emCreateMessage, final ApiCallback<EMSendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessagesToRoomValidateBeforeCall(emCreateMessage, _callback);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendMessagesToUser
     * @param emCreateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call sendMessagesToUserCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateMessage;

        // create path and map variables
        String localVarPath = "/messages/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendMessagesToUserValidateBeforeCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        return sendMessagesToUserCall(emCreateMessage, _callback);

    }

    /**
     * 发送单聊消息
     * 给用户发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_single.html
     * @param emCreateMessage  (optional)
     * @return EMSendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSendMessageResult sendMessagesToUser(EMCreateMessage emCreateMessage) throws ApiException {
        ApiResponse<EMSendMessageResult> localVarResp = sendMessagesToUserWithHttpInfo(emCreateMessage);
        return localVarResp.getData();
    }

    /**
     * 发送单聊消息
     * 给用户发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_single.html
     * @param emCreateMessage  (optional)
     * @return ApiResponse&lt;EMSendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSendMessageResult> sendMessagesToUserWithHttpInfo(EMCreateMessage emCreateMessage) throws ApiException {
        okhttp3.Call localVarCall = sendMessagesToUserValidateBeforeCall(emCreateMessage, null);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送单聊消息 (asynchronously)
     * 给用户发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_single.html
     * @param emCreateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call sendMessagesToUserAsync(EMCreateMessage emCreateMessage, final ApiCallback<EMSendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendMessagesToUserValidateBeforeCall(emCreateMessage, _callback);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for modifyTextOrCustomizeMessage
     * @param msgId 消息 ID (required)
     * @param emModifyTextOrCustomizeMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call modifyTextOrCustomizeMessageCall(String msgId, EMModifyTextOrCustomizeMessage emModifyTextOrCustomizeMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emModifyTextOrCustomizeMessage;

        // create path and map variables
        String localVarPath = "/messages/rewrite/{msgId}"
                .replace("{" + "msgId" + "}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyTextOrCustomizeMessageValidateBeforeCall(String msgId, EMModifyTextOrCustomizeMessage emModifyTextOrCustomizeMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling modifyTextOrCustomizeMessage(Async)");
        }

        return modifyTextOrCustomizeMessageCall(msgId, emModifyTextOrCustomizeMessage, _callback);

    }

    /**
     * 修改文本或自定义消息
     * 修改发送成功的文本消息或自定义消息。若使用该功能，需联系环信商务开通。文档介绍：https://doc.easemob.com/document/server-side/message_modify_text_custom.html
     * @param msgId 消息 ID (required)
     * @param emModifyTextOrCustomizeMessage  (optional)
     * @return EMModifyTextOrCustomizeMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMModifyTextOrCustomizeMessageResult modifyTextOrCustomizeMessage(String msgId, EMModifyTextOrCustomizeMessage emModifyTextOrCustomizeMessage) throws ApiException {
        ApiResponse<EMModifyTextOrCustomizeMessageResult> localVarResp = modifyTextOrCustomizeMessageWithHttpInfo(msgId, emModifyTextOrCustomizeMessage);
        return localVarResp.getData();
    }

    /**
     * 修改文本或自定义消息
     * 修改发送成功的文本消息或自定义消息。若使用该功能，需联系环信商务开通。文档介绍：https://doc.easemob.com/document/server-side/message_modify_text_custom.html
     * @param msgId 消息 ID (required)
     * @param emModifyTextOrCustomizeMessage  (optional)
     * @return ApiResponse&lt;EMModifyTextOrCustomizeMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMModifyTextOrCustomizeMessageResult> modifyTextOrCustomizeMessageWithHttpInfo(String msgId, EMModifyTextOrCustomizeMessage emModifyTextOrCustomizeMessage) throws ApiException {
        okhttp3.Call localVarCall = modifyTextOrCustomizeMessageValidateBeforeCall(msgId, emModifyTextOrCustomizeMessage, null);
        Type localVarReturnType = new TypeToken<EMModifyTextOrCustomizeMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 修改文本或自定义消息 (asynchronously)
     * 修改发送成功的文本消息或自定义消息。若使用该功能，需联系环信商务开通。文档介绍：https://doc.easemob.com/document/server-side/message_modify_text_custom.html
     * @param msgId 消息 ID (required)
     * @param emModifyTextOrCustomizeMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call modifyTextOrCustomizeMessageAsync(String msgId, EMModifyTextOrCustomizeMessage emModifyTextOrCustomizeMessage, final ApiCallback<EMModifyTextOrCustomizeMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyTextOrCustomizeMessageValidateBeforeCall(msgId, emModifyTextOrCustomizeMessage, _callback);
        Type localVarReturnType = new TypeToken<EMModifyTextOrCustomizeMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oneWayClearGroupOrRoomRoamingMessagesWithinPeriod
     * @param username 用户 ID (required)
     * @param groupId 要清空哪个群组或聊天室的漫游消息。你可以传入群组 ID 或聊天室 ID (required)
     * @param delTime 要清空哪个时间点及之前的群组或聊天室的漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayClearGroupOrRoomRoamingMessagesWithinPeriodCall(String username, String groupId, BigDecimal delTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/message/roaming/group/user/{username}/time"
                .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (delTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delTime", delTime));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneWayClearGroupOrRoomRoamingMessagesWithinPeriodValidateBeforeCall(String username, String groupId, BigDecimal delTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling oneWayClearGroupOrRoomRoamingMessagesWithinPeriod(Async)");
        }

        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling oneWayClearGroupOrRoomRoamingMessagesWithinPeriod(Async)");
        }

        // verify the required parameter 'delTime' is set
        if (delTime == null) {
            throw new ApiException("Missing the required parameter 'delTime' when calling oneWayClearGroupOrRoomRoamingMessagesWithinPeriod(Async)");
        }

        return oneWayClearGroupOrRoomRoamingMessagesWithinPeriodCall(username, groupId, delTime, _callback);

    }

    /**
     * 单向清空指定群组或聊天室会话一段时间内的漫游消息
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%BE%A4%E7%BB%84%E6%88%96%E8%81%8A%E5%A4%A9%E5%AE%A4%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param groupId 要清空哪个群组或聊天室的漫游消息。你可以传入群组 ID 或聊天室 ID (required)
     * @param delTime 要清空哪个时间点及之前的群组或聊天室的漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @return EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult oneWayClearGroupOrRoomRoamingMessagesWithinPeriod(String username, String groupId, BigDecimal delTime) throws ApiException {
        ApiResponse<EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult> localVarResp = oneWayClearGroupOrRoomRoamingMessagesWithinPeriodWithHttpInfo(username, groupId, delTime);
        return localVarResp.getData();
    }

    /**
     * 单向清空指定群组或聊天室会话一段时间内的漫游消息
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%BE%A4%E7%BB%84%E6%88%96%E8%81%8A%E5%A4%A9%E5%AE%A4%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param groupId 要清空哪个群组或聊天室的漫游消息。你可以传入群组 ID 或聊天室 ID (required)
     * @param delTime 要清空哪个时间点及之前的群组或聊天室的漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @return ApiResponse&lt;EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult> oneWayClearGroupOrRoomRoamingMessagesWithinPeriodWithHttpInfo(String username, String groupId, BigDecimal delTime) throws ApiException {
        okhttp3.Call localVarCall = oneWayClearGroupOrRoomRoamingMessagesWithinPeriodValidateBeforeCall(username, groupId, delTime, null);
        Type localVarReturnType = new TypeToken<EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 单向清空指定群组或聊天室会话一段时间内的漫游消息 (asynchronously)
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%BE%A4%E7%BB%84%E6%88%96%E8%81%8A%E5%A4%A9%E5%AE%A4%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param groupId 要清空哪个群组或聊天室的漫游消息。你可以传入群组 ID 或聊天室 ID (required)
     * @param delTime 要清空哪个时间点及之前的群组或聊天室的漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayClearGroupOrRoomRoamingMessagesWithinPeriodAsync(String username, String groupId, BigDecimal delTime, final ApiCallback<EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = oneWayClearGroupOrRoomRoamingMessagesWithinPeriodValidateBeforeCall(username, groupId, delTime, _callback);
        Type localVarReturnType = new TypeToken<EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oneWayClearUserRoamingMessages
     * @param username 用户 ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayClearUserRoamingMessagesCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/message/roaming/user/{username}/delete/all"
                .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneWayClearUserRoamingMessagesValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling oneWayClearUserRoamingMessages(Async)");
        }

        return oneWayClearUserRoamingMessagesCall(username, _callback);

    }

    /**
     * 单向清空指定用户的漫游消息
     * 清空后，该用户无法从服务端拉取到漫游消息，而且该用户的所有会话也会被清除，也拉不到会话列表。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @return EMOneWayClearUserRoamingMessagesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMOneWayClearUserRoamingMessagesResult oneWayClearUserRoamingMessages(String username) throws ApiException {
        ApiResponse<EMOneWayClearUserRoamingMessagesResult> localVarResp = oneWayClearUserRoamingMessagesWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 单向清空指定用户的漫游消息
     * 清空后，该用户无法从服务端拉取到漫游消息，而且该用户的所有会话也会被清除，也拉不到会话列表。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @return ApiResponse&lt;EMOneWayClearUserRoamingMessagesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMOneWayClearUserRoamingMessagesResult> oneWayClearUserRoamingMessagesWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = oneWayClearUserRoamingMessagesValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMOneWayClearUserRoamingMessagesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 单向清空指定用户的漫游消息 (asynchronously)
     * 清空后，该用户无法从服务端拉取到漫游消息，而且该用户的所有会话也会被清除，也拉不到会话列表。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayClearUserRoamingMessagesAsync(String username, final ApiCallback<EMOneWayClearUserRoamingMessagesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = oneWayClearUserRoamingMessagesValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMOneWayClearUserRoamingMessagesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for oneWayClearUserRoamingMessagesWithinPeriod
     * @param username 用户 ID (required)
     * @param userId 要清空与哪个用户的单聊会话的漫游消息。需传入该用户的用户 ID (required)
     * @param delTime 要清空哪个时间点及之前的单聊漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayClearUserRoamingMessagesWithinPeriodCall(String username, String userId, BigDecimal delTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rest/message/roaming/chat/user/{username}/time"
                .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (delTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delTime", delTime));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneWayClearUserRoamingMessagesWithinPeriodValidateBeforeCall(String username, String userId, BigDecimal delTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling oneWayClearUserRoamingMessagesWithinPeriod(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling oneWayClearUserRoamingMessagesWithinPeriod(Async)");
        }

        // verify the required parameter 'delTime' is set
        if (delTime == null) {
            throw new ApiException("Missing the required parameter 'delTime' when calling oneWayClearUserRoamingMessagesWithinPeriod(Async)");
        }

        return oneWayClearUserRoamingMessagesWithinPeriodCall(username, userId, delTime, _callback);

    }

    /**
     * 单向清空指定单聊会话一段时间内的漫游消息
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E5%8D%95%E8%81%8A%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param userId 要清空与哪个用户的单聊会话的漫游消息。需传入该用户的用户 ID (required)
     * @param delTime 要清空哪个时间点及之前的单聊漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @return EMOneWayClearUserRoamingMessagesWithinPeriodResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMOneWayClearUserRoamingMessagesWithinPeriodResult oneWayClearUserRoamingMessagesWithinPeriod(String username, String userId, BigDecimal delTime) throws ApiException {
        ApiResponse<EMOneWayClearUserRoamingMessagesWithinPeriodResult> localVarResp = oneWayClearUserRoamingMessagesWithinPeriodWithHttpInfo(username, userId, delTime);
        return localVarResp.getData();
    }

    /**
     * 单向清空指定单聊会话一段时间内的漫游消息
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E5%8D%95%E8%81%8A%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param userId 要清空与哪个用户的单聊会话的漫游消息。需传入该用户的用户 ID (required)
     * @param delTime 要清空哪个时间点及之前的单聊漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @return ApiResponse&lt;EMOneWayClearUserRoamingMessagesWithinPeriodResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMOneWayClearUserRoamingMessagesWithinPeriodResult> oneWayClearUserRoamingMessagesWithinPeriodWithHttpInfo(String username, String userId, BigDecimal delTime) throws ApiException {
        okhttp3.Call localVarCall = oneWayClearUserRoamingMessagesWithinPeriodValidateBeforeCall(username, userId, delTime, null);
        Type localVarReturnType = new TypeToken<EMOneWayClearUserRoamingMessagesWithinPeriodResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 单向清空指定单聊会话一段时间内的漫游消息 (asynchronously)
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E5%8D%95%E8%81%8A%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     * @param username 用户 ID (required)
     * @param userId 要清空与哪个用户的单聊会话的漫游消息。需传入该用户的用户 ID (required)
     * @param delTime 要清空哪个时间点及之前的单聊漫游消息。该时间为 Unix 时间戳，单位为毫秒 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call oneWayClearUserRoamingMessagesWithinPeriodAsync(String username, String userId, BigDecimal delTime, final ApiCallback<EMOneWayClearUserRoamingMessagesWithinPeriodResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = oneWayClearUserRoamingMessagesWithinPeriodValidateBeforeCall(username, userId, delTime, _callback);
        Type localVarReturnType = new TypeToken<EMOneWayClearUserRoamingMessagesWithinPeriodResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for sendGroupDirectionalMessages
     * @param emCreateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call sendGroupDirectionalMessagesCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateMessage;

        // create path and map variables
        String localVarPath = "/messages/chatgroups/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendGroupDirectionalMessagesValidateBeforeCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        return sendGroupDirectionalMessagesCall(emCreateMessage, _callback);

    }

    /**
     * 发送群聊定向消息
     * 你可以向群组中指定的一个或多个成员发送消息，但单次仅支持指定一个群组。对于定向消息，只有作为接收方的指定成员才能看到消息，其他群成员则看不到该消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF
     * @param emCreateMessage  (optional)
     * @return EMSendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSendMessageResult sendGroupDirectionalMessages(EMCreateMessage emCreateMessage) throws ApiException {
        ApiResponse<EMSendMessageResult> localVarResp = sendGroupDirectionalMessagesWithHttpInfo(emCreateMessage);
        return localVarResp.getData();
    }

    /**
     * 发送群聊定向消息
     * 你可以向群组中指定的一个或多个成员发送消息，但单次仅支持指定一个群组。对于定向消息，只有作为接收方的指定成员才能看到消息，其他群成员则看不到该消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF
     * @param emCreateMessage  (optional)
     * @return ApiResponse&lt;EMSendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSendMessageResult> sendGroupDirectionalMessagesWithHttpInfo(EMCreateMessage emCreateMessage) throws ApiException {
        okhttp3.Call localVarCall = sendGroupDirectionalMessagesValidateBeforeCall(emCreateMessage, null);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送群聊定向消息 (asynchronously)
     * 你可以向群组中指定的一个或多个成员发送消息，但单次仅支持指定一个群组。对于定向消息，只有作为接收方的指定成员才能看到消息，其他群成员则看不到该消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF
     * @param emCreateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call sendGroupDirectionalMessagesAsync(EMCreateMessage emCreateMessage, final ApiCallback<EMSendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendGroupDirectionalMessagesValidateBeforeCall(emCreateMessage, _callback);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for sendRoomDirectionalMessages
     * @param emCreateMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call sendRoomDirectionalMessagesCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateMessage;

        // create path and map variables
        String localVarPath = "/messages/chatrooms/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendRoomDirectionalMessagesValidateBeforeCall(EMCreateMessage emCreateMessage, final ApiCallback _callback) throws ApiException {
        return sendRoomDirectionalMessagesCall(emCreateMessage, _callback);

    }

    /**
     * 发送聊天室定向消息
     * 你可以向聊天室中指定的一个或多个成员发送消息，但单次仅支持指定一个聊天室。对于定向消息，只有作为接收方的指定成员才能看到消息，其他聊天室成员则看不到该消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF
     * @param emCreateMessage  (optional)
     * @return EMSendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSendMessageResult sendRoomDirectionalMessages(EMCreateMessage emCreateMessage) throws ApiException {
        ApiResponse<EMSendMessageResult> localVarResp = sendRoomDirectionalMessagesWithHttpInfo(emCreateMessage);
        return localVarResp.getData();
    }

    /**
     * 发送聊天室定向消息
     * 你可以向聊天室中指定的一个或多个成员发送消息，但单次仅支持指定一个聊天室。对于定向消息，只有作为接收方的指定成员才能看到消息，其他聊天室成员则看不到该消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF
     * @param emCreateMessage  (optional)
     * @return ApiResponse&lt;EMSendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSendMessageResult> sendRoomDirectionalMessagesWithHttpInfo(EMCreateMessage emCreateMessage) throws ApiException {
        okhttp3.Call localVarCall = sendRoomDirectionalMessagesValidateBeforeCall(emCreateMessage, null);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送聊天室定向消息 (asynchronously)
     * 你可以向聊天室中指定的一个或多个成员发送消息，但单次仅支持指定一个聊天室。对于定向消息，只有作为接收方的指定成员才能看到消息，其他聊天室成员则看不到该消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E5%AE%9A%E5%90%91%E6%B6%88%E6%81%AF
     * @param emCreateMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call sendRoomDirectionalMessagesAsync(EMCreateMessage emCreateMessage, final ApiCallback<EMSendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendRoomDirectionalMessagesValidateBeforeCall(emCreateMessage, _callback);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for sendRoomBroadcastMessages
     * @param emCreateChatroomBroadcastMessage  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call sendRoomBroadcastMessagesCall(EMCreateChatroomBroadcastMessage emCreateChatroomBroadcastMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateChatroomBroadcastMessage;

        // create path and map variables
        String localVarPath = "/messages/chatrooms/broadcast";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendRoomBroadcastMessagesValidateBeforeCall(EMCreateChatroomBroadcastMessage emCreateChatroomBroadcastMessage, final ApiCallback _callback) throws ApiException {
        return sendRoomBroadcastMessagesCall(emCreateChatroomBroadcastMessage, _callback);

    }

    /**
     * 发送聊天室全局广播消息
     * 可通过该接口向 app 下的所有活跃聊天室（聊天室至少存在一个成员，而且曾经至少发送过一条消息）发送广播消息，支持所有消息类型。。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%85%A8%E5%B1%80%E5%B9%BF%E6%92%AD%E6%B6%88%E6%81%AF
     * @param emCreateChatroomBroadcastMessage  (optional)
     * @return EMSendMessageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSendMessageResult sendRoomBroadcastMessages(EMCreateChatroomBroadcastMessage emCreateChatroomBroadcastMessage) throws ApiException {
        ApiResponse<EMSendMessageResult> localVarResp = sendRoomBroadcastMessagesWithHttpInfo(emCreateChatroomBroadcastMessage);
        return localVarResp.getData();
    }

    /**
     * 发送聊天室全局广播消息
     * 可通过该接口向 app 下的所有活跃聊天室（聊天室至少存在一个成员，而且曾经至少发送过一条消息）发送广播消息，支持所有消息类型。。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%85%A8%E5%B1%80%E5%B9%BF%E6%92%AD%E6%B6%88%E6%81%AF
     * @param emCreateChatroomBroadcastMessage  (optional)
     * @return ApiResponse&lt;EMSendMessageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSendMessageResult> sendRoomBroadcastMessagesWithHttpInfo(EMCreateChatroomBroadcastMessage emCreateChatroomBroadcastMessage) throws ApiException {
        okhttp3.Call localVarCall = sendRoomBroadcastMessagesValidateBeforeCall(emCreateChatroomBroadcastMessage, null);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 发送聊天室全局广播消息 (asynchronously)
     * 可通过该接口向 app 下的所有活跃聊天室（聊天室至少存在一个成员，而且曾经至少发送过一条消息）发送广播消息，支持所有消息类型。。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%85%A8%E5%B1%80%E5%B9%BF%E6%92%AD%E6%B6%88%E6%81%AF
     * @param emCreateChatroomBroadcastMessage  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call sendRoomBroadcastMessagesAsync(EMCreateChatroomBroadcastMessage emCreateChatroomBroadcastMessage, final ApiCallback<EMSendMessageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendRoomBroadcastMessagesValidateBeforeCall(emCreateChatroomBroadcastMessage, _callback);
        Type localVarReturnType = new TypeToken<EMSendMessageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
