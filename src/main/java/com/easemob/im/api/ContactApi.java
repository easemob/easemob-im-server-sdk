/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiCallback;
import com.easemob.im.ApiClient;
import com.easemob.im.ApiException;
import com.easemob.im.ApiResponse;
import com.easemob.im.Configuration;
import com.easemob.im.Pair;
import com.easemob.im.ProgressRequestBody;
import com.easemob.im.ProgressResponseBody;

import com.easemob.im.api.model.*;
import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addContact
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call addContactCall(String ownerUsername, String friendUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{owner_username}/contacts/users/{friend_username}"
            .replace("{" + "owner_username" + "}", localVarApiClient.escapeString(ownerUsername.toString()))
            .replace("{" + "friend_username" + "}", localVarApiClient.escapeString(friendUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addContactValidateBeforeCall(String ownerUsername, String friendUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerUsername' is set
        if (ownerUsername == null) {
            throw new ApiException("Missing the required parameter 'ownerUsername' when calling addContact(Async)");
        }

        // verify the required parameter 'friendUsername' is set
        if (friendUsername == null) {
            throw new ApiException("Missing the required parameter 'friendUsername' when calling addContact(Async)");
        }

        return addContactCall(ownerUsername, friendUsername, _callback);

    }

    /**
     * 添加好友
     * 添加好友，好友必须是和当前用户在一个 App Key 下的用户。对于免费版即时通讯服务，单个 App Key 下的每个用户的好友数量上限为 1000，不同服务版本的 App Key 的该数量上限不同。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @return EMAddContactResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMAddContactResult addContact(String ownerUsername, String friendUsername) throws ApiException {
        ApiResponse<EMAddContactResult> localVarResp = addContactWithHttpInfo(ownerUsername, friendUsername);
        return localVarResp.getData();
    }

    /**
     * 添加好友
     * 添加好友，好友必须是和当前用户在一个 App Key 下的用户。对于免费版即时通讯服务，单个 App Key 下的每个用户的好友数量上限为 1000，不同服务版本的 App Key 的该数量上限不同。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @return ApiResponse&lt;EMAddContactResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMAddContactResult> addContactWithHttpInfo(String ownerUsername, String friendUsername) throws ApiException {
        okhttp3.Call localVarCall = addContactValidateBeforeCall(ownerUsername, friendUsername, null);
        Type localVarReturnType = new TypeToken<EMAddContactResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 添加好友 (asynchronously)
     * 添加好友，好友必须是和当前用户在一个 App Key 下的用户。对于免费版即时通讯服务，单个 App Key 下的每个用户的好友数量上限为 1000，不同服务版本的 App Key 的该数量上限不同。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E6%B7%BB%E5%8A%A0%E5%A5%BD%E5%8F%8B
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call addContactAsync(String ownerUsername, String friendUsername, final ApiCallback<EMAddContactResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = addContactValidateBeforeCall(ownerUsername, friendUsername, _callback);
        Type localVarReturnType = new TypeToken<EMAddContactResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllContactList
     * @param ownerUsername  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getAllContactListCall(String ownerUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{owner_username}/contacts/users"
                .replace("{" + "owner_username" + "}", localVarApiClient.escapeString(ownerUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllContactListValidateBeforeCall(String ownerUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerUsername' is set
        if (ownerUsername == null) {
            throw new ApiException("Missing the required parameter 'ownerUsername' when calling getAllContactList(Async)");
        }

        return getAllContactListCall(ownerUsername, _callback);

    }

    /**
     * 一次性获取好友列表
     * 一次性获取指定用户的好友列表。文档介绍：https://doc.easemob.com/document/server-side/user_relationship.html#%E4%B8%80%E6%AC%A1%E6%80%A7%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param ownerUsername  (required)
     * @return EMGetAllContactListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetAllContactListResult getAllContactList(String ownerUsername) throws ApiException {
        ApiResponse<EMGetAllContactListResult> localVarResp = getAllContactListWithHttpInfo(ownerUsername);
        return localVarResp.getData();
    }

    /**
     * 一次性获取好友列表
     * 一次性获取指定用户的好友列表。文档介绍：https://doc.easemob.com/document/server-side/user_relationship.html#%E4%B8%80%E6%AC%A1%E6%80%A7%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param ownerUsername  (required)
     * @return ApiResponse&lt;EMGetAllContactListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetAllContactListResult> getAllContactListWithHttpInfo(String ownerUsername) throws ApiException {
        okhttp3.Call localVarCall = getAllContactListValidateBeforeCall(ownerUsername, null);
        Type localVarReturnType = new TypeToken<EMGetAllContactListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 一次性获取好友列表 (asynchronously)
     * 一次性获取指定用户的好友列表。文档介绍：https://doc.easemob.com/document/server-side/user_relationship.html#%E4%B8%80%E6%AC%A1%E6%80%A7%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param ownerUsername  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getAllContactListAsync(String ownerUsername, final ApiCallback<EMGetAllContactListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllContactListValidateBeforeCall(ownerUsername, _callback);
        Type localVarReturnType = new TypeToken<EMGetAllContactListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getContactList
     * @param ownerUsername  (required)
     * @param limit 每次期望返回的好友数量，取值范围为 [1,50]，默认值为 10 (optional)
     * @param cursor 数据查询的起始位置 (optional)
     * @param needReturnRemark 是否需要返回好友备注，默认为 true (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getContactListCall(String ownerUsername, Integer limit, String cursor, Boolean needReturnRemark, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{owner_username}/contacts"
            .replace("{" + "owner_username" + "}", localVarApiClient.escapeString(ownerUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (needReturnRemark != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("needReturnRemark", needReturnRemark));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContactListValidateBeforeCall(String ownerUsername, Integer limit, String cursor, Boolean needReturnRemark, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerUsername' is set
        if (ownerUsername == null) {
            throw new ApiException("Missing the required parameter 'ownerUsername' when calling getContactList(Async)");
        }

        return getContactListCall(ownerUsername, limit, cursor, needReturnRemark, _callback);

    }

    /**
     * 获取好友列表
     * 获取指定用户的好友列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param ownerUsername  (required)
     * @param limit 每次期望返回的好友数量，取值范围为 [1,50]，默认值为 10 (optional)
     * @param cursor 数据查询的起始位置 (optional)
     * @param needReturnRemark 是否需要返回好友备注，默认为 true (optional)
     * @return EMGetContactListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetContactListResult getContactList(String ownerUsername, Integer limit, String cursor, Boolean needReturnRemark) throws ApiException {
        ApiResponse<EMGetContactListResult> localVarResp = getContactListWithHttpInfo(ownerUsername, limit, cursor, needReturnRemark);
        return localVarResp.getData();
    }

    /**
     * 获取好友列表
     * 获取指定用户的好友列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param ownerUsername  (required)
     * @param limit 每次期望返回的好友数量，取值范围为 [1,50]，默认值为 10 (optional)
     * @param cursor 数据查询的起始位置 (optional)
     * @param needReturnRemark 是否需要返回好友备注，默认为 true (optional)
     * @return ApiResponse&lt;EMGetContactListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetContactListResult> getContactListWithHttpInfo(String ownerUsername, Integer limit, String cursor, Boolean needReturnRemark) throws ApiException {
        okhttp3.Call localVarCall = getContactListValidateBeforeCall(ownerUsername, limit, cursor, needReturnRemark, null);
        Type localVarReturnType = new TypeToken<EMGetContactListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取好友列表 (asynchronously)
     * 获取指定用户的好友列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%8E%B7%E5%8F%96%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param ownerUsername  (required)
     * @param limit 每次期望返回的好友数量，取值范围为 [1,50]，默认值为 10 (optional)
     * @param cursor 数据查询的起始位置 (optional)
     * @param needReturnRemark 是否需要返回好友备注，默认为 true (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getContactListAsync(String ownerUsername, Integer limit, String cursor, Boolean needReturnRemark, final ApiCallback<EMGetContactListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContactListValidateBeforeCall(ownerUsername, limit, cursor, needReturnRemark, _callback);
        Type localVarReturnType = new TypeToken<EMGetContactListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeContact
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call removeContactCall(String ownerUsername, String friendUsername, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{owner_username}/contacts/users/{friend_username}"
            .replace("{" + "owner_username" + "}", localVarApiClient.escapeString(ownerUsername.toString()))
            .replace("{" + "friend_username" + "}", localVarApiClient.escapeString(friendUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeContactValidateBeforeCall(String ownerUsername, String friendUsername, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerUsername' is set
        if (ownerUsername == null) {
            throw new ApiException("Missing the required parameter 'ownerUsername' when calling removeContact(Async)");
        }

        // verify the required parameter 'friendUsername' is set
        if (friendUsername == null) {
            throw new ApiException("Missing the required parameter 'friendUsername' when calling removeContact(Async)");
        }

        return removeContactCall(ownerUsername, friendUsername, _callback);

    }

    /**
     * 移除好友
     * 从用户的好友列表中移除一个用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E7%A7%BB%E9%99%A4%E5%A5%BD%E5%8F%8B
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @return EMRemoveContactResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMRemoveContactResult removeContact(String ownerUsername, String friendUsername) throws ApiException {
        ApiResponse<EMRemoveContactResult> localVarResp = removeContactWithHttpInfo(ownerUsername, friendUsername);
        return localVarResp.getData();
    }

    /**
     * 移除好友
     * 从用户的好友列表中移除一个用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E7%A7%BB%E9%99%A4%E5%A5%BD%E5%8F%8B
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @return ApiResponse&lt;EMRemoveContactResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMRemoveContactResult> removeContactWithHttpInfo(String ownerUsername, String friendUsername) throws ApiException {
        okhttp3.Call localVarCall = removeContactValidateBeforeCall(ownerUsername, friendUsername, null);
        Type localVarReturnType = new TypeToken<EMRemoveContactResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 移除好友 (asynchronously)
     * 从用户的好友列表中移除一个用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E7%A7%BB%E9%99%A4%E5%A5%BD%E5%8F%8B
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call removeContactAsync(String ownerUsername, String friendUsername, final ApiCallback<EMRemoveContactResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeContactValidateBeforeCall(ownerUsername, friendUsername, _callback);
        Type localVarReturnType = new TypeToken<EMRemoveContactResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setContactNote
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param emSetContactNote  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call setContactNoteCall(String ownerUsername, String friendUsername, EMSetContactNote emSetContactNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emSetContactNote;

        // create path and map variables
        String localVarPath = "/users/{owner_username}/contacts/users/{friend_username}"
            .replace("{" + "owner_username" + "}", localVarApiClient.escapeString(ownerUsername.toString()))
            .replace("{" + "friend_username" + "}", localVarApiClient.escapeString(friendUsername.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setContactNoteValidateBeforeCall(String ownerUsername, String friendUsername, EMSetContactNote emSetContactNote, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ownerUsername' is set
        if (ownerUsername == null) {
            throw new ApiException("Missing the required parameter 'ownerUsername' when calling setContactNote(Async)");
        }

        // verify the required parameter 'friendUsername' is set
        if (friendUsername == null) {
            throw new ApiException("Missing the required parameter 'friendUsername' when calling setContactNote(Async)");
        }

        return setContactNoteCall(ownerUsername, friendUsername, emSetContactNote, _callback);

    }

    /**
     * 设置好友备注
     * 你可以调用该接口设置你在当前 app 下的好友的备注，即你和要设置备注的好友需在同一个 App Key 下。对于免费版即时通讯服务，单个 App Key 下的每个用户的好友数量上限为 100，不同服务套餐包的 App Key 的该数量上限不同。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%AE%BE%E7%BD%AE%E5%A5%BD%E5%8F%8B%E5%A4%87%E6%B3%A8
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param emSetContactNote  (optional)
     * @return EMSetContactNoteResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSetContactNoteResult setContactNote(String ownerUsername, String friendUsername, EMSetContactNote emSetContactNote) throws ApiException {
        ApiResponse<EMSetContactNoteResult> localVarResp = setContactNoteWithHttpInfo(ownerUsername, friendUsername, emSetContactNote);
        return localVarResp.getData();
    }

    /**
     * 设置好友备注
     * 你可以调用该接口设置你在当前 app 下的好友的备注，即你和要设置备注的好友需在同一个 App Key 下。对于免费版即时通讯服务，单个 App Key 下的每个用户的好友数量上限为 100，不同服务套餐包的 App Key 的该数量上限不同。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%AE%BE%E7%BD%AE%E5%A5%BD%E5%8F%8B%E5%A4%87%E6%B3%A8
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param emSetContactNote  (optional)
     * @return ApiResponse&lt;EMSetContactNoteResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSetContactNoteResult> setContactNoteWithHttpInfo(String ownerUsername, String friendUsername, EMSetContactNote emSetContactNote) throws ApiException {
        okhttp3.Call localVarCall = setContactNoteValidateBeforeCall(ownerUsername, friendUsername, emSetContactNote, null);
        Type localVarReturnType = new TypeToken<EMSetContactNoteResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 设置好友备注 (asynchronously)
     * 你可以调用该接口设置你在当前 app 下的好友的备注，即你和要设置备注的好友需在同一个 App Key 下。对于免费版即时通讯服务，单个 App Key 下的每个用户的好友数量上限为 100，不同服务套餐包的 App Key 的该数量上限不同。文档介绍：https://docs-im-beta.easemob.com/document/server-side/user_relationship.html#%E8%AE%BE%E7%BD%AE%E5%A5%BD%E5%8F%8B%E5%A4%87%E6%B3%A8
     * @param ownerUsername  (required)
     * @param friendUsername  (required)
     * @param emSetContactNote  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call setContactNoteAsync(String ownerUsername, String friendUsername, EMSetContactNote emSetContactNote, final ApiCallback<EMSetContactNoteResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setContactNoteValidateBeforeCall(ownerUsername, friendUsername, emSetContactNote, _callback);
        Type localVarReturnType = new TypeToken<EMSetContactNoteResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for importContactList
     * @param username  (required)
     * @param isSendNotice 好友导入后是否向 SDK 发送通知：- true：是；-（默认）false：否 (optional)
     * @param emImportContactList  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call importContactListCall(String username, Boolean isSendNotice, EMImportContactList emImportContactList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emImportContactList;

        // create path and map variables
        String localVarPath = "/users/{username}/contacts/import"
                .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isSendNotice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSendNotice", isSendNotice));
        }

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importContactListValidateBeforeCall(String username, Boolean isSendNotice, EMImportContactList emImportContactList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling importContactList(Async)");
        }

        return importContactListCall(username, isSendNotice, emImportContactList, _callback);

    }

    /**
     * 导入好友列表
     * 你可以调用该接口导入好友列表。文档介绍：https://doc.easemob.com/document/server-side/user_relationship.html#%E5%AF%BC%E5%85%A5%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param isSendNotice 好友导入后是否向 SDK 发送通知：- true：是；-（默认）false：否 (optional)
     * @param emImportContactList  (optional)
     * @return EMImportContactListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMImportContactListResult importContactList(String username, Boolean isSendNotice, EMImportContactList emImportContactList) throws ApiException {
        ApiResponse<EMImportContactListResult> localVarResp = importContactListWithHttpInfo(username, isSendNotice, emImportContactList);
        return localVarResp.getData();
    }

    /**
     * 导入好友列表
     * 你可以调用该接口导入好友列表。文档介绍：https://doc.easemob.com/document/server-side/user_relationship.html#%E5%AF%BC%E5%85%A5%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param isSendNotice 好友导入后是否向 SDK 发送通知：- true：是；-（默认）false：否 (optional)
     * @param emImportContactList  (optional)
     * @return ApiResponse&lt;EMImportContactListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMImportContactListResult> importContactListWithHttpInfo(String username, Boolean isSendNotice, EMImportContactList emImportContactList) throws ApiException {
        okhttp3.Call localVarCall = importContactListValidateBeforeCall(username, isSendNotice, emImportContactList, null);
        Type localVarReturnType = new TypeToken<EMImportContactListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 导入好友列表 (asynchronously)
     * 你可以调用该接口导入好友列表。文档介绍：https://doc.easemob.com/document/server-side/user_relationship.html#%E5%AF%BC%E5%85%A5%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param isSendNotice 好友导入后是否向 SDK 发送通知：- true：是；-（默认）false：否 (optional)
     * @param emImportContactList  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call importContactListAsync(String username, Boolean isSendNotice, EMImportContactList emImportContactList, final ApiCallback<EMImportContactListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = importContactListValidateBeforeCall(username, isSendNotice, emImportContactList, _callback);
        Type localVarReturnType = new TypeToken<EMImportContactListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
