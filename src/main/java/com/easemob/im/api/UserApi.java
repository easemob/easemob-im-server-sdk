/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiCallback;
import com.easemob.im.ApiClient;
import com.easemob.im.ApiException;
import com.easemob.im.ApiResponse;
import com.easemob.im.Configuration;
import com.easemob.im.Pair;

import com.easemob.im.api.model.*;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createUsers
     * @param emCreateUser  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call createUsersCall(List<EMCreateUser> emCreateUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emCreateUser;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUsersValidateBeforeCall(List<EMCreateUser> emCreateUser, final ApiCallback _callback) throws ApiException {
        return createUsersCall(emCreateUser, _callback);

    }

    /**
     * 批量注册用户
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E7%94%A8%E6%88%B7
     * @param emCreateUser  (optional)
     * @return EMCreateUsersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMCreateUsersResult createUsers(List<EMCreateUser> emCreateUser) throws ApiException {
        ApiResponse<EMCreateUsersResult> localVarResp = createUsersWithHttpInfo(emCreateUser);
        return localVarResp.getData();
    }

    /**
     * 批量注册用户
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E7%94%A8%E6%88%B7
     * @param emCreateUser  (optional)
     * @return ApiResponse&lt;EMCreateUsersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMCreateUsersResult> createUsersWithHttpInfo(List<EMCreateUser> emCreateUser) throws ApiException {
        okhttp3.Call localVarCall = createUsersValidateBeforeCall(emCreateUser, null);
        Type localVarReturnType = new TypeToken<EMCreateUsersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量注册用户 (asynchronously)
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E7%94%A8%E6%88%B7
     * @param emCreateUser  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call createUsersAsync(List<EMCreateUser> emCreateUser, final ApiCallback<EMCreateUsersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUsersValidateBeforeCall(emCreateUser, _callback);
        Type localVarReturnType = new TypeToken<EMCreateUsersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param username 用户 ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call deleteUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling deleteUser(Async)");
        }

        return deleteUserCall(username, _callback);

    }

    /**
     * 删除用户账号
     * 删除单个用户。如果该用户是群主或者聊天室所有者，系统会同时删除对应的群组和聊天室。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7
     * @param username 用户 ID (required)
     * @return EMDeleteUserResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMDeleteUserResult deleteUser(String username) throws ApiException {
        ApiResponse<EMDeleteUserResult> localVarResp = deleteUserWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 删除用户账号
     * 删除单个用户。如果该用户是群主或者聊天室所有者，系统会同时删除对应的群组和聊天室。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7
     * @param username 用户 ID (required)
     * @return ApiResponse&lt;EMDeleteUserResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMDeleteUserResult> deleteUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMDeleteUserResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 删除用户账号 (asynchronously)
     * 删除单个用户。如果该用户是群主或者聊天室所有者，系统会同时删除对应的群组和聊天室。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7
     * @param username 用户 ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call deleteUserAsync(String username, final ApiCallback<EMDeleteUserResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMDeleteUserResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUsers
     * @param limit 要删除的用户的数量。取值范围为 [1,100]，默认值为 10 (optional)
     * @param cursor 开始删除用户的游标位置。第一次批量删除时若不设置 cursor，请求成功后会从最先创建的用户开始删除 limit 指定的用户数量。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已完全删除 app 中的所有用户 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call deleteUsersCall(Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUsersValidateBeforeCall(Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return deleteUsersCall(limit, cursor, _callback);

    }

    /**
     * 批量删除用户
     * 删除某个 App 下指定数量的用户账号。建议一次删除的用户数量不要超过100。需要注意的是，这里只指定了要删除的用户数量，并未指定要删除的具体用户，你可以在响应中查看删除的用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     * @param limit 要删除的用户的数量。取值范围为 [1,100]，默认值为 10 (optional)
     * @param cursor 开始删除用户的游标位置。第一次批量删除时若不设置 cursor，请求成功后会从最先创建的用户开始删除 limit 指定的用户数量。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已完全删除 app 中的所有用户 (optional)
     * @return EMDeleteUsersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMDeleteUsersResult deleteUsers(Integer limit, String cursor) throws ApiException {
        ApiResponse<EMDeleteUsersResult> localVarResp = deleteUsersWithHttpInfo(limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 批量删除用户
     * 删除某个 App 下指定数量的用户账号。建议一次删除的用户数量不要超过100。需要注意的是，这里只指定了要删除的用户数量，并未指定要删除的具体用户，你可以在响应中查看删除的用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     * @param limit 要删除的用户的数量。取值范围为 [1,100]，默认值为 10 (optional)
     * @param cursor 开始删除用户的游标位置。第一次批量删除时若不设置 cursor，请求成功后会从最先创建的用户开始删除 limit 指定的用户数量。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已完全删除 app 中的所有用户 (optional)
     * @return ApiResponse&lt;EMDeleteUsersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMDeleteUsersResult> deleteUsersWithHttpInfo(Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = deleteUsersValidateBeforeCall(limit, cursor, null);
        Type localVarReturnType = new TypeToken<EMDeleteUsersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量删除用户 (asynchronously)
     * 删除某个 App 下指定数量的用户账号。建议一次删除的用户数量不要超过100。需要注意的是，这里只指定了要删除的用户数量，并未指定要删除的具体用户，你可以在响应中查看删除的用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     * @param limit 要删除的用户的数量。取值范围为 [1,100]，默认值为 10 (optional)
     * @param cursor 开始删除用户的游标位置。第一次批量删除时若不设置 cursor，请求成功后会从最先创建的用户开始删除 limit 指定的用户数量。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已完全删除 app 中的所有用户 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call deleteUsersAsync(Integer limit, String cursor, final ApiCallback<EMDeleteUsersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUsersValidateBeforeCall(limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<EMDeleteUsersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceUserLogout
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call forceUserLogoutCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/disconnect"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceUserLogoutValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling forceUserLogout(Async)");
        }

        return forceUserLogoutCall(username, _callback);

    }

    /**
     * 强制下线
     * 强制用户即将用户状态改为离线，用户需要重新登录才能正常使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF
     * @param username  (required)
     * @return EMForceUserLogoutResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMForceUserLogoutResult forceUserLogout(String username) throws ApiException {
        ApiResponse<EMForceUserLogoutResult> localVarResp = forceUserLogoutWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 强制下线
     * 强制用户即将用户状态改为离线，用户需要重新登录才能正常使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF
     * @param username  (required)
     * @return ApiResponse&lt;EMForceUserLogoutResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMForceUserLogoutResult> forceUserLogoutWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = forceUserLogoutValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMForceUserLogoutResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 强制下线 (asynchronously)
     * 强制用户即将用户状态改为离线，用户需要重新登录才能正常使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call forceUserLogoutAsync(String username, final ApiCallback<EMForceUserLogoutResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceUserLogoutValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMForceUserLogoutResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllGloballyMutedUsers
     * @param pageNum 请求查询的页码 (optional)
     * @param pageSize 请求查询每页显示的禁言用户的数量。取值范围为 [1,50] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getAllGloballyMutedUsersCall(Integer pageNum, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNum", pageNum));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGloballyMutedUsersValidateBeforeCall(Integer pageNum, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return getAllGloballyMutedUsersCall(pageNum, pageSize, _callback);

    }

    /**
     * 查询 app 下的所有全局禁言的用户
     * 该方法查询 app 下所有全局禁言的用户及其禁言剩余时间。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2-app-%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80%E7%9A%84%E7%94%A8%E6%88%B7
     * @param pageNum 请求查询的页码 (optional)
     * @param pageSize 请求查询每页显示的禁言用户的数量。取值范围为 [1,50] (optional)
     * @return EMGetAllGloballyMutedUsersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetAllGloballyMutedUsersResult getAllGloballyMutedUsers(Integer pageNum, Integer pageSize) throws ApiException {
        ApiResponse<EMGetAllGloballyMutedUsersResult> localVarResp = getAllGloballyMutedUsersWithHttpInfo(pageNum, pageSize);
        return localVarResp.getData();
    }

    /**
     * 查询 app 下的所有全局禁言的用户
     * 该方法查询 app 下所有全局禁言的用户及其禁言剩余时间。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2-app-%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80%E7%9A%84%E7%94%A8%E6%88%B7
     * @param pageNum 请求查询的页码 (optional)
     * @param pageSize 请求查询每页显示的禁言用户的数量。取值范围为 [1,50] (optional)
     * @return ApiResponse&lt;EMGetAllGloballyMutedUsersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetAllGloballyMutedUsersResult> getAllGloballyMutedUsersWithHttpInfo(Integer pageNum, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = getAllGloballyMutedUsersValidateBeforeCall(pageNum, pageSize, null);
        Type localVarReturnType = new TypeToken<EMGetAllGloballyMutedUsersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询 app 下的所有全局禁言的用户 (asynchronously)
     * 该方法查询 app 下所有全局禁言的用户及其禁言剩余时间。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2-app-%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80%E7%9A%84%E7%94%A8%E6%88%B7
     * @param pageNum 请求查询的页码 (optional)
     * @param pageSize 请求查询每页显示的禁言用户的数量。取值范围为 [1,50] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getAllGloballyMutedUsersAsync(Integer pageNum, Integer pageSize, final ApiCallback<EMGetAllGloballyMutedUsersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGloballyMutedUsersValidateBeforeCall(pageNum, pageSize, _callback);
        Type localVarReturnType = new TypeToken<EMGetAllGloballyMutedUsersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOfflineMessageStatus
     * @param username  (required)
     * @param msgid 要查看状态的离线消息 ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getOfflineMessageStatusCall(String username, String msgid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/offline_msg_status/{msgid}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
            .replace("{" + "msgid" + "}", localVarApiClient.escapeString(msgid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOfflineMessageStatusValidateBeforeCall(String username, String msgid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getOfflineMessageStatus(Async)");
        }

        // verify the required parameter 'msgid' is set
        if (msgid == null) {
            throw new ApiException("Missing the required parameter 'msgid' when calling getOfflineMessageStatus(Async)");
        }

        return getOfflineMessageStatusCall(username, msgid, _callback);

    }

    /**
     * 获取指定离线消息的投递状态
     * 获取用户的指定离线消息的投递状态，即查看该消息是否已投递。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E7%9A%84%E6%8A%95%E9%80%92%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param msgid 要查看状态的离线消息 ID (required)
     * @return EMGetOfflineMessageStatusResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetOfflineMessageStatusResult getOfflineMessageStatus(String username, String msgid) throws ApiException {
        ApiResponse<EMGetOfflineMessageStatusResult> localVarResp = getOfflineMessageStatusWithHttpInfo(username, msgid);
        return localVarResp.getData();
    }

    /**
     * 获取指定离线消息的投递状态
     * 获取用户的指定离线消息的投递状态，即查看该消息是否已投递。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E7%9A%84%E6%8A%95%E9%80%92%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param msgid 要查看状态的离线消息 ID (required)
     * @return ApiResponse&lt;EMGetOfflineMessageStatusResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetOfflineMessageStatusResult> getOfflineMessageStatusWithHttpInfo(String username, String msgid) throws ApiException {
        okhttp3.Call localVarCall = getOfflineMessageStatusValidateBeforeCall(username, msgid, null);
        Type localVarReturnType = new TypeToken<EMGetOfflineMessageStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定离线消息的投递状态 (asynchronously)
     * 获取用户的指定离线消息的投递状态，即查看该消息是否已投递。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E7%9A%84%E6%8A%95%E9%80%92%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param msgid 要查看状态的离线消息 ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getOfflineMessageStatusAsync(String username, String msgid, final ApiCallback<EMGetOfflineMessageStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOfflineMessageStatusValidateBeforeCall(username, msgid, _callback);
        Type localVarReturnType = new TypeToken<EMGetOfflineMessageStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param username 用户 ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUserCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUser(Async)");
        }

        return getUserCall(username, _callback);

    }

    /**
     * 获取用户详情
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%A6%E6%83%85
     * @param username 用户 ID (required)
     * @return EMGetUserResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUserResult getUser(String username) throws ApiException {
        ApiResponse<EMGetUserResult> localVarResp = getUserWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 获取用户详情
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%A6%E6%83%85
     * @param username 用户 ID (required)
     * @return ApiResponse&lt;EMGetUserResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUserResult> getUserWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMGetUserResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户详情 (asynchronously)
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%A6%E6%83%85
     * @param username 用户 ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUserAsync(String username, final ApiCallback<EMGetUserResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMGetUserResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserGlobalMute
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUserGlobalMuteCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mutes/{username}"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserGlobalMuteValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserGlobalMute(Async)");
        }

        return getUserGlobalMuteCall(username, _callback);

    }

    /**
     * 查询单个用户 ID 全局禁言
     * 查询单个用户的单聊、群聊和聊天室的全局禁言详情。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7-id-%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     * @param username  (required)
     * @return EMGetUserGlobalMuteResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUserGlobalMuteResult getUserGlobalMute(String username) throws ApiException {
        ApiResponse<EMGetUserGlobalMuteResult> localVarResp = getUserGlobalMuteWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 查询单个用户 ID 全局禁言
     * 查询单个用户的单聊、群聊和聊天室的全局禁言详情。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7-id-%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     * @param username  (required)
     * @return ApiResponse&lt;EMGetUserGlobalMuteResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUserGlobalMuteResult> getUserGlobalMuteWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getUserGlobalMuteValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMGetUserGlobalMuteResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 查询单个用户 ID 全局禁言 (asynchronously)
     * 查询单个用户的单聊、群聊和聊天室的全局禁言详情。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7-id-%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUserGlobalMuteAsync(String username, final ApiCallback<EMGetUserGlobalMuteResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserGlobalMuteValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMGetUserGlobalMuteResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserOfflineMessageCount
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUserOfflineMessageCountCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/offline_msg_count"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserOfflineMessageCountValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserOfflineMessageCount(Async)");
        }

        return getUserOfflineMessageCountCall(username, _callback);

    }

    /**
     * 获取用户离线消息数量
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E6%95%B0%E9%87%8F
     * @param username  (required)
     * @return EMGetUserOfflineMessageCountResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUserOfflineMessageCountResult getUserOfflineMessageCount(String username) throws ApiException {
        ApiResponse<EMGetUserOfflineMessageCountResult> localVarResp = getUserOfflineMessageCountWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 获取用户离线消息数量
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E6%95%B0%E9%87%8F
     * @param username  (required)
     * @return ApiResponse&lt;EMGetUserOfflineMessageCountResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUserOfflineMessageCountResult> getUserOfflineMessageCountWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getUserOfflineMessageCountValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMGetUserOfflineMessageCountResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户离线消息数量 (asynchronously)
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E6%95%B0%E9%87%8F
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUserOfflineMessageCountAsync(String username, final ApiCallback<EMGetUserOfflineMessageCountResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserOfflineMessageCountValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMGetUserOfflineMessageCountResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserOnlineLoginDeviceList
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUserOnlineLoginDeviceListCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/resources"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserOnlineLoginDeviceListValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserOnlineLoginDeviceList(Async)");
        }

        return getUserOnlineLoginDeviceListCall(username, _callback);

    }

    /**
     * 获取指定账号的在线登录设备列表
     * 多设备登录情况下，你可以调用该接口获取指定账号的在线登录设备列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%99%BB%E5%BD%95%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @return EMGetUserOnlineLoginDeviceListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUserOnlineLoginDeviceListResult getUserOnlineLoginDeviceList(String username) throws ApiException {
        ApiResponse<EMGetUserOnlineLoginDeviceListResult> localVarResp = getUserOnlineLoginDeviceListWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 获取指定账号的在线登录设备列表
     * 多设备登录情况下，你可以调用该接口获取指定账号的在线登录设备列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%99%BB%E5%BD%95%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @return ApiResponse&lt;EMGetUserOnlineLoginDeviceListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUserOnlineLoginDeviceListResult> getUserOnlineLoginDeviceListWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getUserOnlineLoginDeviceListValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMGetUserOnlineLoginDeviceListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取指定账号的在线登录设备列表 (asynchronously)
     * 多设备登录情况下，你可以调用该接口获取指定账号的在线登录设备列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%99%BB%E5%BD%95%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUserOnlineLoginDeviceListAsync(String username, final ApiCallback<EMGetUserOnlineLoginDeviceListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserOnlineLoginDeviceListValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMGetUserOnlineLoginDeviceListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserOnlineState
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUserOnlineStateCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/status"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserOnlineStateValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling getUserOnlineState(Async)");
        }

        return getUserOnlineStateCall(username, _callback);

    }

    /**
     * 获取单个用户在线状态
     * 查看单个用户是在线还是离线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @return EMGetUserOnlineStateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUserOnlineStateResult getUserOnlineState(String username) throws ApiException {
        ApiResponse<EMGetUserOnlineStateResult> localVarResp = getUserOnlineStateWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 获取单个用户在线状态
     * 查看单个用户是在线还是离线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @return ApiResponse&lt;EMGetUserOnlineStateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUserOnlineStateResult> getUserOnlineStateWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = getUserOnlineStateValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMGetUserOnlineStateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取单个用户在线状态 (asynchronously)
     * 查看单个用户是在线还是离线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUserOnlineStateAsync(String username, final ApiCallback<EMGetUserOnlineStateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserOnlineStateValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMGetUserOnlineStateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param limit 请求查询用户的数量。取值范围为 [1,100]，默认值为 10。若实际用户数量超过 100，返回 100 个用户 (optional)
     * @param cursor 开始获取数据的游标位置，用于分页显示用户列表。第一次发起批量查询用户请求时若不设置 cursor，请求成功后会获得第一页用户列表。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已查询到 app 中所有用户 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUsersCall(Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(Integer limit, String cursor, final ApiCallback _callback) throws ApiException {
        return getUsersCall(limit, cursor, _callback);

    }

    /**
     * 获取用户列表
     * 该接口查询多个用户的信息列表，按照用户创建时间顺序返回。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     * @param limit 请求查询用户的数量。取值范围为 [1,100]，默认值为 10。若实际用户数量超过 100，返回 100 个用户 (optional)
     * @param cursor 开始获取数据的游标位置，用于分页显示用户列表。第一次发起批量查询用户请求时若不设置 cursor，请求成功后会获得第一页用户列表。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已查询到 app 中所有用户 (optional)
     * @return EMGetUsersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUsersResult getUsers(Integer limit, String cursor) throws ApiException {
        ApiResponse<EMGetUsersResult> localVarResp = getUsersWithHttpInfo(limit, cursor);
        return localVarResp.getData();
    }

    /**
     * 获取用户列表
     * 该接口查询多个用户的信息列表，按照用户创建时间顺序返回。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     * @param limit 请求查询用户的数量。取值范围为 [1,100]，默认值为 10。若实际用户数量超过 100，返回 100 个用户 (optional)
     * @param cursor 开始获取数据的游标位置，用于分页显示用户列表。第一次发起批量查询用户请求时若不设置 cursor，请求成功后会获得第一页用户列表。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已查询到 app 中所有用户 (optional)
     * @return ApiResponse&lt;EMGetUsersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUsersResult> getUsersWithHttpInfo(Integer limit, String cursor) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(limit, cursor, null);
        Type localVarReturnType = new TypeToken<EMGetUsersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 获取用户列表 (asynchronously)
     * 该接口查询多个用户的信息列表，按照用户创建时间顺序返回。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     * @param limit 请求查询用户的数量。取值范围为 [1,100]，默认值为 10。若实际用户数量超过 100，返回 100 个用户 (optional)
     * @param cursor 开始获取数据的游标位置，用于分页显示用户列表。第一次发起批量查询用户请求时若不设置 cursor，请求成功后会获得第一页用户列表。从响应 body 中获取 cursor，并在下一次请求的 URL 中传入该 cursor，直到响应 body 中不再有 cursor 字段，则表示已查询到 app 中所有用户 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUsersAsync(Integer limit, String cursor, final ApiCallback<EMGetUsersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(limit, cursor, _callback);
        Type localVarReturnType = new TypeToken<EMGetUsersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsersOnlineState
     * @param emGetUsersOnlineState  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call getUsersOnlineStateCall(EMGetUsersOnlineState emGetUsersOnlineState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emGetUsersOnlineState;

        // create path and map variables
        String localVarPath = "/users/batch/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersOnlineStateValidateBeforeCall(EMGetUsersOnlineState emGetUsersOnlineState, final ApiCallback _callback) throws ApiException {
        return getUsersOnlineStateCall(emGetUsersOnlineState, _callback);

    }

    /**
     * 批量获取用户在线状态
     * 批量查看用户是在线还是离线状态，单次请求最多可查看 100 个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param emGetUsersOnlineState  (optional)
     * @return EMGetUsersOnlineStateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMGetUsersOnlineStateResult getUsersOnlineState(EMGetUsersOnlineState emGetUsersOnlineState) throws ApiException {
        ApiResponse<EMGetUsersOnlineStateResult> localVarResp = getUsersOnlineStateWithHttpInfo(emGetUsersOnlineState);
        return localVarResp.getData();
    }

    /**
     * 批量获取用户在线状态
     * 批量查看用户是在线还是离线状态，单次请求最多可查看 100 个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param emGetUsersOnlineState  (optional)
     * @return ApiResponse&lt;EMGetUsersOnlineStateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMGetUsersOnlineStateResult> getUsersOnlineStateWithHttpInfo(EMGetUsersOnlineState emGetUsersOnlineState) throws ApiException {
        okhttp3.Call localVarCall = getUsersOnlineStateValidateBeforeCall(emGetUsersOnlineState, null);
        Type localVarReturnType = new TypeToken<EMGetUsersOnlineStateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量获取用户在线状态 (asynchronously)
     * 批量查看用户是在线还是离线状态，单次请求最多可查看 100 个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     * @param emGetUsersOnlineState  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call getUsersOnlineStateAsync(EMGetUsersOnlineState emGetUsersOnlineState, final ApiCallback<EMGetUsersOnlineStateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersOnlineStateValidateBeforeCall(emGetUsersOnlineState, _callback);
        Type localVarReturnType = new TypeToken<EMGetUsersOnlineStateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifyUserPassword
     * @param username 用户 ID (required)
     * @param emModifyUserPassword  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call modifyUserPasswordCall(String username, EMModifyUserPassword emModifyUserPassword, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emModifyUserPassword;

        // create path and map variables
        String localVarPath = "/users/{username}/password"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyUserPasswordValidateBeforeCall(String username, EMModifyUserPassword emModifyUserPassword, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling modifyUserPassword(Async)");
        }

        return modifyUserPasswordCall(username, emModifyUserPassword, _callback);

    }

    /**
     * 修改用户密码
     * 通过服务端接口修改用户的登录密码，不需要提供原密码。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81
     * @param username 用户 ID (required)
     * @param emModifyUserPassword  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public void modifyUserPassword(String username, EMModifyUserPassword emModifyUserPassword) throws ApiException {
        modifyUserPasswordWithHttpInfo(username, emModifyUserPassword);
    }

    /**
     * 修改用户密码
     * 通过服务端接口修改用户的登录密码，不需要提供原密码。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81
     * @param username 用户 ID (required)
     * @param emModifyUserPassword  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<Void> modifyUserPasswordWithHttpInfo(String username, EMModifyUserPassword emModifyUserPassword) throws ApiException {
        okhttp3.Call localVarCall = modifyUserPasswordValidateBeforeCall(username, emModifyUserPassword, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 修改用户密码 (asynchronously)
     * 通过服务端接口修改用户的登录密码，不需要提供原密码。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81
     * @param username 用户 ID (required)
     * @param emModifyUserPassword  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call modifyUserPasswordAsync(String username, EMModifyUserPassword emModifyUserPassword, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyUserPasswordValidateBeforeCall(username, emModifyUserPassword, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserGlobalMute
     * @param emSetUserGlobalMute  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call setUserGlobalMuteCall(EMSetUserGlobalMute emSetUserGlobalMute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emSetUserGlobalMute;

        // create path and map variables
        String localVarPath = "/mutes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserGlobalMuteValidateBeforeCall(EMSetUserGlobalMute emSetUserGlobalMute, final ApiCallback _callback) throws ApiException {
        return setUserGlobalMuteCall(emSetUserGlobalMute, _callback);

    }

    /**
     * 设置用户全局禁言
     * 设置单个用户 ID 的单聊、群组或聊天室消息的全局禁言。设置成功后，该用户将无法在对应的单聊、群组或聊天室中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E7%94%A8%E6%88%B7%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     * @param emSetUserGlobalMute  (optional)
     * @return EMSetUserGlobalMuteResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMSetUserGlobalMuteResult setUserGlobalMute(EMSetUserGlobalMute emSetUserGlobalMute) throws ApiException {
        ApiResponse<EMSetUserGlobalMuteResult> localVarResp = setUserGlobalMuteWithHttpInfo(emSetUserGlobalMute);
        return localVarResp.getData();
    }

    /**
     * 设置用户全局禁言
     * 设置单个用户 ID 的单聊、群组或聊天室消息的全局禁言。设置成功后，该用户将无法在对应的单聊、群组或聊天室中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E7%94%A8%E6%88%B7%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     * @param emSetUserGlobalMute  (optional)
     * @return ApiResponse&lt;EMSetUserGlobalMuteResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMSetUserGlobalMuteResult> setUserGlobalMuteWithHttpInfo(EMSetUserGlobalMute emSetUserGlobalMute) throws ApiException {
        okhttp3.Call localVarCall = setUserGlobalMuteValidateBeforeCall(emSetUserGlobalMute, null);
        Type localVarReturnType = new TypeToken<EMSetUserGlobalMuteResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 设置用户全局禁言 (asynchronously)
     * 设置单个用户 ID 的单聊、群组或聊天室消息的全局禁言。设置成功后，该用户将无法在对应的单聊、群组或聊天室中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E7%94%A8%E6%88%B7%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     * @param emSetUserGlobalMute  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call setUserGlobalMuteAsync(EMSetUserGlobalMute emSetUserGlobalMute, final ApiCallback<EMSetUserGlobalMuteResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserGlobalMuteValidateBeforeCall(emSetUserGlobalMute, _callback);
        Type localVarReturnType = new TypeToken<EMSetUserGlobalMuteResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userActivate
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call userActivateCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/activate"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userActivateValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userActivate(Async)");
        }

        return userActivateCall(username, _callback);

    }

    /**
     * 账号解禁
     * 被解禁后用户才能恢复登录。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E8%A7%A3%E7%A6%81
     * @param username  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public void userActivate(String username) throws ApiException {
        userActivateWithHttpInfo(username);
    }

    /**
     * 账号解禁
     * 被解禁后用户才能恢复登录。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E8%A7%A3%E7%A6%81
     * @param username  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<Void> userActivateWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userActivateValidateBeforeCall(username, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * 账号解禁 (asynchronously)
     * 被解禁后用户才能恢复登录。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E8%A7%A3%E7%A6%81
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call userActivateAsync(String username, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = userActivateValidateBeforeCall(username, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for userDeactivate
     * @param username  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call userDeactivateCall(String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/deactivate"
            .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userDeactivateValidateBeforeCall(String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling userDeactivate(Async)");
        }

        return userDeactivateCall(username, _callback);

    }

    /**
     * 账号封禁
     * 环信即时通讯 IM 提供了对用户的禁用以及解禁接口操作，用户若被禁用将立即下线并无法登录进入环信即时通讯 IM，直到被解禁后才能恢复登录。常用在对异常用户的即时处理场景使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E5%B0%81%E7%A6%81
     * @param username  (required)
     * @return EMUserDeactivateResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMUserDeactivateResult userDeactivate(String username) throws ApiException {
        ApiResponse<EMUserDeactivateResult> localVarResp = userDeactivateWithHttpInfo(username);
        return localVarResp.getData();
    }

    /**
     * 账号封禁
     * 环信即时通讯 IM 提供了对用户的禁用以及解禁接口操作，用户若被禁用将立即下线并无法登录进入环信即时通讯 IM，直到被解禁后才能恢复登录。常用在对异常用户的即时处理场景使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E5%B0%81%E7%A6%81
     * @param username  (required)
     * @return ApiResponse&lt;EMUserDeactivateResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMUserDeactivateResult> userDeactivateWithHttpInfo(String username) throws ApiException {
        okhttp3.Call localVarCall = userDeactivateValidateBeforeCall(username, null);
        Type localVarReturnType = new TypeToken<EMUserDeactivateResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 账号封禁 (asynchronously)
     * 环信即时通讯 IM 提供了对用户的禁用以及解禁接口操作，用户若被禁用将立即下线并无法登录进入环信即时通讯 IM，直到被解禁后才能恢复登录。常用在对异常用户的即时处理场景使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E5%B0%81%E7%A6%81
     * @param username  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call userDeactivateAsync(String username, final ApiCallback<EMUserDeactivateResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = userDeactivateValidateBeforeCall(username, _callback);
        Type localVarReturnType = new TypeToken<EMUserDeactivateResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for modifyPushNicknames
     * @param emModifyPushNickname  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call modifyPushNicknamesCall(List<EMModifyPushNickname> emModifyPushNickname, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = emModifyPushNickname;

        // create path and map variables
        String localVarPath = "/push/nickname";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
                "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifyPushNicknamesValidateBeforeCall(List<EMModifyPushNickname> emModifyPushNickname, final ApiCallback _callback) throws ApiException {
        return modifyPushNicknamesCall(emModifyPushNickname, _callback);

    }

    /**
     * 批量修改用户推送昵称。文档介绍：https://doc.easemob.com/document/server-side/push.html#%E6%89%B9%E9%87%8F%E8%AE%BE%E7%BD%AE%E7%A6%BB%E7%BA%BF%E6%8E%A8%E9%80%81%E6%97%B6%E6%98%BE%E7%A4%BA%E7%9A%84%E6%98%B5%E7%A7%B0
     * @param emModifyPushNickname  (optional)
     * @return EMModifyPushNicknamesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMModifyPushNicknamesResult modifyPushNicknames(List<EMModifyPushNickname> emModifyPushNickname) throws ApiException {
        ApiResponse<EMModifyPushNicknamesResult> localVarResp = modifyPushNicknamesWithHttpInfo(emModifyPushNickname);
        return localVarResp.getData();
    }

    /**
     * 批量修改用户推送昵称。 文档介绍：https://doc.easemob.com/document/server-side/push.html#%E6%89%B9%E9%87%8F%E8%AE%BE%E7%BD%AE%E7%A6%BB%E7%BA%BF%E6%8E%A8%E9%80%81%E6%97%B6%E6%98%BE%E7%A4%BA%E7%9A%84%E6%98%B5%E7%A7%B0
     * @param emModifyPushNickname  (optional)
     * @return ApiResponse&lt;EMModifyPushNicknamesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMModifyPushNicknamesResult> modifyPushNicknamesWithHttpInfo(List<EMModifyPushNickname> emModifyPushNickname) throws ApiException {
        okhttp3.Call localVarCall = modifyPushNicknamesValidateBeforeCall(emModifyPushNickname, null);
        Type localVarReturnType = new TypeToken<EMModifyPushNicknamesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 批量修改用户推送昵称 (asynchronously)。 文档介绍：https://doc.easemob.com/document/server-side/push.html#%E6%89%B9%E9%87%8F%E8%AE%BE%E7%BD%AE%E7%A6%BB%E7%BA%BF%E6%8E%A8%E9%80%81%E6%97%B6%E6%98%BE%E7%A4%BA%E7%9A%84%E6%98%B5%E7%A7%B0
     * @param emModifyPushNickname  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call modifyPushNicknamesAsync(List<EMModifyPushNickname> emModifyPushNickname, final ApiCallback<EMModifyPushNicknamesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifyPushNicknamesValidateBeforeCall(emModifyPushNickname, _callback);
        Type localVarReturnType = new TypeToken<EMModifyPushNicknamesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    /**
     * Build call for forceUserLogoutFromSingleDevice
     * @param username  (required)
     * @param resourceId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     */
    public okhttp3.Call forceUserLogoutFromSingleDeviceCall(String username, String resourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{username}/disconnect/{resourceId}"
                .replace("{" + "username" + "}", localVarApiClient.escapeString(username.toString()))
                .replace("{" + "resourceId" + "}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
                "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceUserLogoutFromSingleDeviceValidateBeforeCall(String username, String resourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'username' is set
        if (username == null) {
            throw new ApiException("Missing the required parameter 'username' when calling forceUserLogoutFromSingleDevice(Async)");
        }

        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling forceUserLogoutFromSingleDevice(Async)");
        }

        return forceUserLogoutFromSingleDeviceCall(username, resourceId, _callback);

    }

    /**
     * 强制用户从单设备下线
     * 如果用户在多个设备上登录，你可以调用该接口强制其在某一台设备上下线。若强制用户从所有设备下线，可以调用强制用户下线接口。文档介绍：https://doc.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E7%94%A8%E6%88%B7%E4%BB%8E%E5%8D%95%E8%AE%BE%E5%A4%87%E4%B8%8B%E7%BA%BF
     * @param username  (required)
     * @param resourceId  (required)
     * @return EMForceUserLogoutFromSingleDeviceResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public EMForceUserLogoutFromSingleDeviceResult forceUserLogoutFromSingleDevice(String username, String resourceId) throws ApiException {
        ApiResponse<EMForceUserLogoutFromSingleDeviceResult> localVarResp = forceUserLogoutFromSingleDeviceWithHttpInfo(username, resourceId);
        return localVarResp.getData();
    }

    /**
     * 强制用户从单设备下线
     * 如果用户在多个设备上登录，你可以调用该接口强制其在某一台设备上下线。若强制用户从所有设备下线，可以调用强制用户下线接口。文档介绍：https://doc.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E7%94%A8%E6%88%B7%E4%BB%8E%E5%8D%95%E8%AE%BE%E5%A4%87%E4%B8%8B%E7%BA%BF
     * @param username  (required)
     * @param resourceId  (required)
     * @return ApiResponse&lt;EMForceUserLogoutFromSingleDeviceResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     */
    public ApiResponse<EMForceUserLogoutFromSingleDeviceResult> forceUserLogoutFromSingleDeviceWithHttpInfo(String username, String resourceId) throws ApiException {
        okhttp3.Call localVarCall = forceUserLogoutFromSingleDeviceValidateBeforeCall(username, resourceId, null);
        Type localVarReturnType = new TypeToken<EMForceUserLogoutFromSingleDeviceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * 强制用户从单设备下线 (asynchronously)
     * 如果用户在多个设备上登录，你可以调用该接口强制其在某一台设备上下线。若强制用户从所有设备下线，可以调用强制用户下线接口。文档介绍：https://doc.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E7%94%A8%E6%88%B7%E4%BB%8E%E5%8D%95%E8%AE%BE%E5%A4%87%E4%B8%8B%E7%BA%BF
     * @param username  (required)
     * @param resourceId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     */
    public okhttp3.Call forceUserLogoutFromSingleDeviceAsync(String username, String resourceId, final ApiCallback<EMForceUserLogoutFromSingleDeviceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceUserLogoutFromSingleDeviceValidateBeforeCall(username, resourceId, _callback);
        Type localVarReturnType = new TypeToken<EMForceUserLogoutFromSingleDeviceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
