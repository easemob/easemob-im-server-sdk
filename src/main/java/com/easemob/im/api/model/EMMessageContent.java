/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import java.util.Objects;

import com.easemob.im.api.model.EMImageSize;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.easemob.im.JSON;

/**
 * 消息内容
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:28:44.506406+08:00[Asia/Shanghai]")
public class EMMessageContent {
    public static final String SERIALIZED_NAME_MSG = "msg";
    @SerializedName(SERIALIZED_NAME_MSG)
    private String msg;

    public static final String SERIALIZED_NAME_TYPE = "type";
    @SerializedName(SERIALIZED_NAME_TYPE)
    private String type;

    public static final String SERIALIZED_NAME_FILENAME = "filename";
    @SerializedName(SERIALIZED_NAME_FILENAME)
    private String filename;

    public static final String SERIALIZED_NAME_SECRET = "secret";
    @SerializedName(SERIALIZED_NAME_SECRET)
    private String secret;

    public static final String SERIALIZED_NAME_SIZE = "size";
    @SerializedName(SERIALIZED_NAME_SIZE)
    private EMImageSize size;

    public static final String SERIALIZED_NAME_URL = "url";
    @SerializedName(SERIALIZED_NAME_URL)
    private String url;

    public static final String SERIALIZED_NAME_LENGTH = "length";
    @SerializedName(SERIALIZED_NAME_LENGTH)
    private Integer length;

    public static final String SERIALIZED_NAME_THUMB = "thumb";
    @SerializedName(SERIALIZED_NAME_THUMB)
    private String thumb;

    public static final String SERIALIZED_NAME_FILE_LENGTH = "file_length";
    @SerializedName(SERIALIZED_NAME_FILE_LENGTH)
    private Integer fileLength;

    public static final String SERIALIZED_NAME_THUMB_SECRET = "thumb_secret";
    @SerializedName(SERIALIZED_NAME_THUMB_SECRET)
    private String thumbSecret;

    public static final String SERIALIZED_NAME_LAT = "lat";
    @SerializedName(SERIALIZED_NAME_LAT)
    private String lat;

    public static final String SERIALIZED_NAME_LNG = "lng";
    @SerializedName(SERIALIZED_NAME_LNG)
    private String lng;

    public static final String SERIALIZED_NAME_ADDR = "addr";
    @SerializedName(SERIALIZED_NAME_ADDR)
    private String addr;

    public static final String SERIALIZED_NAME_ACTION = "action";
    @SerializedName(SERIALIZED_NAME_ACTION)
    private String action;

    public static final String SERIALIZED_NAME_CUSTOM_EVENT = "customEvent";
    @SerializedName(SERIALIZED_NAME_CUSTOM_EVENT)
    private String customEvent;

    public static final String SERIALIZED_NAME_CUSTOM_EXTS = "customExts";
    @SerializedName(SERIALIZED_NAME_CUSTOM_EXTS)
    private Object customExts;

    public EMMessageContent() {
    }

    public EMMessageContent msg(String msg) {

        this.msg = msg;
        return this;
    }

    /**
     * 消息内容
     *
     * @return msg
     **/
    @javax.annotation.Nullable
    public String getMsg() {
        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public EMMessageContent type(String type) {

        this.type = type;
        return this;
    }

    /**
     * 聊天室广播消息类型。仅在发送聊天室广播消息时使用
     *
     * @return type
     **/
    @javax.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public EMMessageContent filename(String filename) {

        this.filename = filename;
        return this;
    }

    /**
     * 图片名称/语音文件的名称/视频文件的名称/文件名称
     *
     * @return filename
     **/
    @javax.annotation.Nullable
    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }

    public EMMessageContent secret(String secret) {

        this.secret = secret;
        return this;
    }

    /**
     * 图片/语音/视频/文件的访问密钥，即成功上传图片/语音/视频/文件后，从 文件上传 的响应 body 中获取的 share-secret。如果图片/语音/视频/文件上传时设置了文件访问限制（restrict-access），则该字段为必填
     *
     * @return secret
     **/
    @javax.annotation.Nullable
    public String getSecret() {
        return secret;
    }

    public void setSecret(String secret) {
        this.secret = secret;
    }

    public EMMessageContent size(EMImageSize size) {

        this.size = size;
        return this;
    }

    /**
     * Get size
     *
     * @return size
     **/
    @javax.annotation.Nullable
    public EMImageSize getSize() {
        return size;
    }

    public void setSize(EMImageSize size) {
        this.size = size;
    }

    public EMMessageContent url(String url) {

        this.url = url;
        return this;
    }

    /**
     * 图片/语音/视频/文件 URL 地址：https://{host}/{org_name}/{app_name}/chatfiles/{file_uuid}。其中 file_uud 为文件 ID，成功上传图片/语音/视频/文件后，从 文件上传 的响应 body 中获取
     *
     * @return url
     **/
    @javax.annotation.Nullable
    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public EMMessageContent length(Integer length) {

        this.length = length;
        return this;
    }

    /**
     * 语音/视频时长，单位为秒
     *
     * @return length
     **/
    @javax.annotation.Nullable
    public Integer getLength() {
        return length;
    }

    public void setLength(Integer length) {
        this.length = length;
    }

    public EMMessageContent thumb(String thumb) {

        this.thumb = thumb;
        return this;
    }

    /**
     * 视频缩略图 URL 地址：https://{host}/{org_name}/{app_name}/chatfiles/{file_uuid}。file_uuid 为视频缩略图唯一标识，成功上传缩略图文件后，从 文件上传 的响应 body 中获取
     *
     * @return thumb
     **/
    @javax.annotation.Nullable
    public String getThumb() {
        return thumb;
    }

    public void setThumb(String thumb) {
        this.thumb = thumb;
    }

    public EMMessageContent fileLength(Integer fileLength) {

        this.fileLength = fileLength;
        return this;
    }

    /**
     * 视频文件大小，单位为字节
     *
     * @return fileLength
     **/
    @javax.annotation.Nullable
    public Integer getFileLength() {
        return fileLength;
    }

    public void setFileLength(Integer fileLength) {
        this.fileLength = fileLength;
    }

    public EMMessageContent thumbSecret(String thumbSecret) {

        this.thumbSecret = thumbSecret;
        return this;
    }

    /**
     * 视频缩略图访问密钥，即成功上传视频文件后，从 文件上传 的响应 body 中获取的 share-secret。如果缩略图文件上传时设置了文件访问限制（restrict-access），则该字段为必填
     *
     * @return thumbSecret
     **/
    @javax.annotation.Nullable
    public String getThumbSecret() {
        return thumbSecret;
    }

    public void setThumbSecret(String thumbSecret) {
        this.thumbSecret = thumbSecret;
    }

    public EMMessageContent lat(String lat) {

        this.lat = lat;
        return this;
    }

    /**
     * 位置的纬度，单位为度
     *
     * @return lat
     **/
    @javax.annotation.Nullable
    public String getLat() {
        return lat;
    }

    public void setLat(String lat) {
        this.lat = lat;
    }

    public EMMessageContent lng(String lng) {

        this.lng = lng;
        return this;
    }

    /**
     * 位置的经度，单位为度
     *
     * @return lng
     **/
    @javax.annotation.Nullable
    public String getLng() {
        return lng;
    }

    public void setLng(String lng) {
        this.lng = lng;
    }

    public EMMessageContent addr(String addr) {

        this.addr = addr;
        return this;
    }

    /**
     * 位置的文字描述
     *
     * @return addr
     **/
    @javax.annotation.Nullable
    public String getAddr() {
        return addr;
    }

    public void setAddr(String addr) {
        this.addr = addr;
    }

    public EMMessageContent action(String action) {

        this.action = action;
        return this;
    }

    /**
     * 命令内容
     *
     * @return action
     **/
    @javax.annotation.Nullable
    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public EMMessageContent customEvent(String customEvent) {

        this.customEvent = customEvent;
        return this;
    }

    /**
     * 用户自定义的事件类型。该参数的值必须满足正则表达式 [a-zA-Z0-9-_/\\.]{1,32}，长度为 1-32 个字符
     *
     * @return customEvent
     **/
    @javax.annotation.Nullable
    public String getCustomEvent() {
        return customEvent;
    }

    public void setCustomEvent(String customEvent) {
        this.customEvent = customEvent;
    }

    public EMMessageContent customExts(Object customExts) {

        this.customExts = customExts;
        return this;
    }

    /**
     * 用户自定义的事件属性，类型必须是 Map&lt;String,String&gt;，最多可以包含 16 个元素。customExts 是可选的，不需要可以不传
     *
     * @return customExts
     **/
    @javax.annotation.Nullable
    public Object getCustomExts() {
        return customExts;
    }

    public void setCustomExts(Object customExts) {
        this.customExts = customExts;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EMMessageContent messageContent = (EMMessageContent) o;
        return Objects.equals(this.msg, messageContent.msg) &&
                Objects.equals(this.type, messageContent.type) &&
                Objects.equals(this.filename, messageContent.filename) &&
                Objects.equals(this.secret, messageContent.secret) &&
                Objects.equals(this.size, messageContent.size) &&
                Objects.equals(this.url, messageContent.url) &&
                Objects.equals(this.length, messageContent.length) &&
                Objects.equals(this.thumb, messageContent.thumb) &&
                Objects.equals(this.fileLength, messageContent.fileLength) &&
                Objects.equals(this.thumbSecret, messageContent.thumbSecret) &&
                Objects.equals(this.lat, messageContent.lat) &&
                Objects.equals(this.lng, messageContent.lng) &&
                Objects.equals(this.addr, messageContent.addr) &&
                Objects.equals(this.action, messageContent.action) &&
                Objects.equals(this.customEvent, messageContent.customEvent) &&
                Objects.equals(this.customExts, messageContent.customExts);
    }

    @Override
    public int hashCode() {
        return Objects.hash(msg, type, filename, secret, size, url, length, thumb, fileLength,
                thumbSecret, lat, lng, addr, action, customEvent, customExts);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EMMessageContent {\n");
        sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
        sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    url: ").append(toIndentedString(url)).append("\n");
        sb.append("    length: ").append(toIndentedString(length)).append("\n");
        sb.append("    thumb: ").append(toIndentedString(thumb)).append("\n");
        sb.append("    fileLength: ").append(toIndentedString(fileLength)).append("\n");
        sb.append("    thumbSecret: ").append(toIndentedString(thumbSecret)).append("\n");
        sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
        sb.append("    lng: ").append(toIndentedString(lng)).append("\n");
        sb.append("    addr: ").append(toIndentedString(addr)).append("\n");
        sb.append("    action: ").append(toIndentedString(action)).append("\n");
        sb.append("    customEvent: ").append(toIndentedString(customEvent)).append("\n");
        sb.append("    customExts: ").append(toIndentedString(customExts)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("msg");
        openapiFields.add("type");
        openapiFields.add("filename");
        openapiFields.add("secret");
        openapiFields.add("size");
        openapiFields.add("url");
        openapiFields.add("length");
        openapiFields.add("thumb");
        openapiFields.add("file_length");
        openapiFields.add("thumb_secret");
        openapiFields.add("lat");
        openapiFields.add("lng");
        openapiFields.add("addr");
        openapiFields.add("action");
        openapiFields.add("customEvent");
        openapiFields.add("customExts");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EMMessageContent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EMMessageContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(String.format(
                        "The required field(s) %s in EMMessageContent is not found in the empty JSON string",
                        EMMessageContent.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EMMessageContent.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(String.format(
                        "The field `%s` in the JSON string is not defined in the `EMMessageContent` properties. JSON: %s",
                        entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("msg") != null && !jsonObj.get("msg").isJsonNull()) && !jsonObj.get("msg")
                .isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `msg` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("msg").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get(
                "type").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `type` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull())
                && !jsonObj.get("filename").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `filename` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("filename").toString()));
        }
        if ((jsonObj.get("secret") != null && !jsonObj.get("secret").isJsonNull()) && !jsonObj.get(
                "secret").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `secret` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("secret").toString()));
        }
        // validate the optional field `size`
        if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
            EMImageSize.validateJsonElement(jsonObj.get("size"));
        }
        if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url")
                .isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `url` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("url").toString()));
        }
        if ((jsonObj.get("thumb") != null && !jsonObj.get("thumb").isJsonNull()) && !jsonObj.get(
                "thumb").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `thumb` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("thumb").toString()));
        }
        if ((jsonObj.get("thumb_secret") != null && !jsonObj.get("thumb_secret").isJsonNull())
                && !jsonObj.get("thumb_secret").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `thumb_secret` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("thumb_secret").toString()));
        }
        if ((jsonObj.get("lat") != null && !jsonObj.get("lat").isJsonNull()) && !jsonObj.get("lat")
                .isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `lat` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("lat").toString()));
        }
        if ((jsonObj.get("lng") != null && !jsonObj.get("lng").isJsonNull()) && !jsonObj.get("lng")
                .isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `lng` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("lng").toString()));
        }
        if ((jsonObj.get("addr") != null && !jsonObj.get("addr").isJsonNull()) && !jsonObj.get(
                "addr").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `addr` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("addr").toString()));
        }
        if ((jsonObj.get("action") != null && !jsonObj.get("action").isJsonNull()) && !jsonObj.get(
                "action").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `action` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("action").toString()));
        }
        if ((jsonObj.get("customEvent") != null && !jsonObj.get("customEvent").isJsonNull())
                && !jsonObj.get("customEvent").isJsonPrimitive()) {
            throw new IllegalArgumentException(String.format(
                    "Expected the field `customEvent` to be a primitive type in the JSON string but got `%s`",
                    jsonObj.get("customEvent").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EMMessageContent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EMMessageContent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EMMessageContent> thisAdapter
                    = gson.getDelegateAdapter(this, TypeToken.get(EMMessageContent.class));

            return (TypeAdapter<T>) new TypeAdapter<EMMessageContent>() {
                @Override
                public void write(JsonWriter out, EMMessageContent value) throws IOException {
                    JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                    elementAdapter.write(out, obj);
                }

                @Override
                public EMMessageContent read(JsonReader in) throws IOException {
                    JsonElement jsonElement = elementAdapter.read(in);
                    validateJsonElement(jsonElement);
                    return thisAdapter.fromJsonTree(jsonElement);
                }

            }.nullSafe();
        }
    }

    /**
     * Create an instance of EMMessageContent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EMMessageContent
     * @throws IOException if the JSON string is invalid with respect to EMMessageContent
     */
    public static EMMessageContent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EMMessageContent.class);
    }

    /**
     * Convert an instance of EMMessageContent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

