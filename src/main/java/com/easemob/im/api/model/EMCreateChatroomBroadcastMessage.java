/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api.model;

import com.easemob.im.JSON;
import com.google.gson.*;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

/**
 * EMCreateChatroomBroadcastMessage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-29T17:16:19.382777+08:00[Asia/Shanghai]")
public class EMCreateChatroomBroadcastMessage {
  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_MSG = "msg";
  @SerializedName(SERIALIZED_NAME_MSG)
  private EMMessageContent msg;

  public static final String SERIALIZED_NAME_EXT = "ext";
  @SerializedName(SERIALIZED_NAME_EXT)
  private Object ext;

  public static final String SERIALIZED_NAME_CHATROOM_MSG_LEVEL = "chatroom_msg_level";
  @SerializedName(SERIALIZED_NAME_CHATROOM_MSG_LEVEL)
  private String chatroomMsgLevel;

  public EMCreateChatroomBroadcastMessage() {
  }

  public EMCreateChatroomBroadcastMessage from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * 广播消息发送方的用户 ID。若不传入该字段，服务器默认设置为管理员，即 “admin”；若传入字段但值为空字符串 (“”)，请求失败
   * @return from
  **/
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public EMCreateChatroomBroadcastMessage msg(EMMessageContent msg) {
    
    this.msg = msg;
    return this;
  }

   /**
   * Get msg
   * @return msg
  **/
  @javax.annotation.Nonnull
  public EMMessageContent getMsg() {
    return msg;
  }


  public void setMsg(EMMessageContent msg) {
    this.msg = msg;
  }


  public EMCreateChatroomBroadcastMessage ext(Object ext) {
    
    this.ext = ext;
    return this;
  }

   /**
   * 消息支持扩展字段，可添加自定义信息。不能对该参数传入 null。同时，推送通知也支持自定义扩展字段，详见 APNs 自定义显示：https://docs-im-beta.easemob.com/document/ios/push.html#_4-%E8%AE%BE%E7%BD%AE%E7%A6%BB%E7%BA%BF%E6%8E%A8%E9%80%81 和 Android 推送字段说明：https://docs-im-beta.easemob.com/document/android/push.html#_5-%E8%A7%A3%E6%9E%90%E6%94%B6%E5%88%B0%E7%9A%84%E6%8E%A8%E9%80%81%E5%AD%97%E6%AE%B5
   * @return ext
  **/
  @javax.annotation.Nullable
  public Object getExt() {
    return ext;
  }


  public void setExt(Object ext) {
    this.ext = ext;
  }


  public EMCreateChatroomBroadcastMessage chatroomMsgLevel(String chatroomMsgLevel) {
    
    this.chatroomMsgLevel = chatroomMsgLevel;
    return this;
  }

   /**
   * 聊天室消息优先级，仅对发送聊天室消息有效： - high：高； - （默认）normal：普通； - low：低
   * @return chatroomMsgLevel
  **/
  @javax.annotation.Nullable
  public String getChatroomMsgLevel() {
    return chatroomMsgLevel;
  }


  public void setChatroomMsgLevel(String chatroomMsgLevel) {
    this.chatroomMsgLevel = chatroomMsgLevel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EMCreateChatroomBroadcastMessage createChatroomBroadcastMessage = (EMCreateChatroomBroadcastMessage) o;
    return Objects.equals(this.from, createChatroomBroadcastMessage.from) &&
        Objects.equals(this.msg, createChatroomBroadcastMessage.msg) &&
        Objects.equals(this.ext, createChatroomBroadcastMessage.ext) &&
        Objects.equals(this.chatroomMsgLevel, createChatroomBroadcastMessage.chatroomMsgLevel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, msg, ext, chatroomMsgLevel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EMCreateChatroomBroadcastMessage {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    msg: ").append(toIndentedString(msg)).append("\n");
    sb.append("    ext: ").append(toIndentedString(ext)).append("\n");
    sb.append("    chatroomMsgLevel: ").append(toIndentedString(chatroomMsgLevel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from");
    openapiFields.add("msg");
    openapiFields.add("ext");
    openapiFields.add("chatroom_msg_level");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("msg");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EMCreateChatroomBroadcastMessage
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EMCreateChatroomBroadcastMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EMCreateChatroomBroadcastMessage is not found in the empty JSON string", EMCreateChatroomBroadcastMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EMCreateChatroomBroadcastMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EMCreateChatroomBroadcastMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EMCreateChatroomBroadcastMessage.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // validate the required field `msg`
      EMMessageContent.validateJsonElement(jsonObj.get("msg"));
      if ((jsonObj.get("chatroom_msg_level") != null && !jsonObj.get("chatroom_msg_level").isJsonNull()) && !jsonObj.get("chatroom_msg_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chatroom_msg_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chatroom_msg_level").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EMCreateChatroomBroadcastMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EMCreateChatroomBroadcastMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EMCreateChatroomBroadcastMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EMCreateChatroomBroadcastMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<EMCreateChatroomBroadcastMessage>() {
           @Override
           public void write(JsonWriter out, EMCreateChatroomBroadcastMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EMCreateChatroomBroadcastMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EMCreateChatroomBroadcastMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EMCreateChatroomBroadcastMessage
  * @throws IOException if the JSON string is invalid with respect to EMCreateChatroomBroadcastMessage
  */
  public static EMCreateChatroomBroadcastMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EMCreateChatroomBroadcastMessage.class);
  }

 /**
  * Convert an instance of EMCreateChatroomBroadcastMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

