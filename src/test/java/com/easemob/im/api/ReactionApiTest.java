/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiException;
import com.easemob.im.api.model.*;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for ReactionApi
 */
@Disabled
public class ReactionApiTest extends AbstractTest {

    private final ReactionApi api = new ReactionApi();

    private final UserApi userApi = new UserApi();

    private final MessageApi messageApi = new MessageApi();

    /**
     * 删除 Reaction
     *
     * 删除当前用户追加的 Reaction。文档介绍：https://docs-im-beta.easemob.com/document/server-side/reaction.html#%E5%88%A0%E9%99%A4-reaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReactionTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult sendMessageResult = assertDoesNotThrow(() -> messageApi.sendMessagesToUser(emCreateMessage));
        assertNotNull(sendMessageResult.getData());
        Map<String, Object> data = (Map<String, Object>) sendMessageResult.getData();

        String msgId = (String) data.get(username2);
        String message = "emoji_1";

        EMSetReaction emSetReaction = new EMSetReaction();
        emSetReaction.setMsgId(msgId);
        emSetReaction.setMessage(message);

        EMSetReactionResult setReactionResult = assertDoesNotThrow(() -> api.setReaction(username1, emSetReaction));
        assertNotNull(setReactionResult);
        assertNotNull(setReactionResult.getRequestStatusCode());
        assertEquals("ok", setReactionResult.getRequestStatusCode());

        EMDeleteReactionResult deleteReactionResult = assertDoesNotThrow(() -> api.deleteReaction(username1, msgId, message));
        assertNotNull(deleteReactionResult);
        assertEquals("ok", deleteReactionResult.getRequestStatusCode());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 根据消息 ID 获取 Reaction
     *
     * 该方法根据单聊或群聊中的消息 ID 获取单个或多个消息的 Reaction 信息，包括 Reaction ID、使用的表情 ID、以及使用该 Reaction 的用户 ID 及用户人数。获取的 Reaction 的用户列表只展示最早三个添加 Reaction 的用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/reaction.html#%E6%A0%B9%E6%8D%AE%E6%B6%88%E6%81%AF-id-%E8%8E%B7%E5%8F%96-reaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReactionTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult sendMessageResult = assertDoesNotThrow(() -> messageApi.sendMessagesToUser(emCreateMessage));
        assertNotNull(sendMessageResult.getData());
        Map<String, Object> data = (Map<String, Object>) sendMessageResult.getData();

        String msgId = (String) data.get(username2);
        String message = "emoji_1";

        EMSetReaction emSetReaction = new EMSetReaction();
        emSetReaction.setMsgId(msgId);
        emSetReaction.setMessage(message);

        EMSetReactionResult setReactionResult = assertDoesNotThrow(() -> api.setReaction(username1, emSetReaction));
        assertNotNull(setReactionResult);
        assertNotNull(setReactionResult.getRequestStatusCode());
        assertEquals("ok", setReactionResult.getRequestStatusCode());

        List<String> msgIdList = Arrays.asList(msgId);
        String msgType = "chat";
        String groupId = null;

        EMGetReactionResult getReactionResult = assertDoesNotThrow(() -> api.getReaction(username1, msgIdList, msgType, groupId));
        assertNotNull(getReactionResult);
        assertEquals("ok", getReactionResult.getRequestStatusCode());
        assertNotNull(getReactionResult.getData());
        assertNotNull(getReactionResult.getData().get(0));
        assertEquals(msgId, getReactionResult.getData().get(0).getMsgId());
        assertEquals(1, getReactionResult.getData().get(0).getReactionList().get(0).getUserList().size());
        assertEquals(message, getReactionResult.getData().get(0).getReactionList().get(0).getReaction());

        assertDoesNotThrow(() -> api.deleteReaction(username1, msgId, message));

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 根据消息 ID 和表情 ID 获取 Reaction 信息
     *
     * 在单聊或群聊场景中对单条消息创建或追加 Reaction。创建 Reaction 指对消息添加第一条 Reaction，后续的 Reaction 添加称为追加。文档介绍：https://docs-im-beta.easemob.com/document/server-side/reaction.html#%E5%88%9B%E5%BB%BA-%E8%BF%BD%E5%8A%A0-reaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReactionDetailTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult sendMessageResult = assertDoesNotThrow(() -> messageApi.sendMessagesToUser(emCreateMessage));
        assertNotNull(sendMessageResult.getData());
        Map<String, Object> data = (Map<String, Object>) sendMessageResult.getData();

        String msgId = (String) data.get(username2);
        String message = "emoji_1";

        EMSetReaction emSetReaction = new EMSetReaction();
        emSetReaction.setMsgId(msgId);
        emSetReaction.setMessage(message);

        EMSetReactionResult setReactionResult = assertDoesNotThrow(() -> api.setReaction(username1, emSetReaction));
        assertNotNull(setReactionResult);
        assertNotNull(setReactionResult.getRequestStatusCode());
        assertEquals("ok", setReactionResult.getRequestStatusCode());

        Integer limit = 1;
        String cursor = null;

        EMGetReactionDetailResult getReactionDetailResult = assertDoesNotThrow(() -> api.getReactionDetail(username1, msgId, message, limit, cursor));
        assertNotNull(getReactionDetailResult);
        assertNotNull(getReactionDetailResult.getData());
        assertNotNull(getReactionDetailResult.getData().getUserList());
        assertEquals(message, getReactionDetailResult.getData().getReaction());
        assertEquals(1, getReactionDetailResult.getData().getUserList().size());
        assertEquals(true, getReactionDetailResult.getData().getState());

        assertDoesNotThrow(() -> api.deleteReaction(username1, msgId, message));

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 创建/追加 Reaction
     *
     * 在单聊或群聊场景中对单条消息创建或追加 Reaction。创建 Reaction 指对消息添加第一条 Reaction，后续的 Reaction 添加称为追加。文档介绍：https://docs-im-beta.easemob.com/document/server-side/reaction.html#%E5%88%9B%E5%BB%BA-%E8%BF%BD%E5%8A%A0-reaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setReactionTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult sendMessageResult = assertDoesNotThrow(() -> messageApi.sendMessagesToUser(emCreateMessage));
        assertNotNull(sendMessageResult.getData());
        Map<String, Object> data = (Map<String, Object>) sendMessageResult.getData();

        String msgId = (String) data.get(username2);
        String message = "emoji_1";

        EMSetReaction emSetReaction = new EMSetReaction();
        emSetReaction.setMsgId(msgId);
        emSetReaction.setMessage(message);

        EMSetReactionResult setReactionResult = assertDoesNotThrow(() -> api.setReaction(username1, emSetReaction));
        assertNotNull(setReactionResult);
        assertNotNull(setReactionResult.getRequestStatusCode());
        assertEquals("ok", setReactionResult.getRequestStatusCode());

        assertDoesNotThrow(() -> api.deleteReaction(username1, msgId, message));

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

}
