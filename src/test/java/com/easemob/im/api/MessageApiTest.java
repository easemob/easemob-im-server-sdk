/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiException;
import com.easemob.im.api.model.*;
import org.junit.jupiter.api.Test;
import org.junit.platform.commons.util.ClassLoaderUtils;

import java.io.File;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for MessageApi
 */
public class MessageApiTest extends AbstractTest {

    private final UserApi userApi = new UserApi();

    private final MessageApi messageApi = new MessageApi();

    private final GroupApi groupApi = new GroupApi();

    private final RoomApi roomApi = new RoomApi();

    private final ChatFileApi chatFileApi = new ChatFileApi();

    public MessageApiTest() {
    }

    /**
     * 导入群聊消息
     *
     * 你可以在数据迁移时导入群聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E7%BE%A4%E8%81%8A%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importChatGroupMessageTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMImportChatGroupMessage emImportChatUserMessage = new EMImportChatGroupMessage();
        emImportChatUserMessage.setFrom(username1);
        emImportChatUserMessage.setTarget(groupId);
        emImportChatUserMessage.setType("txt");
        emImportChatUserMessage.setIsAckRead(true);
        emImportChatUserMessage.setMsgTimestamp(new BigDecimal(System.currentTimeMillis()));
        emImportChatUserMessage.needDownload(false);
        emImportChatUserMessage.body(new EMMessageContent().msg("test message1"));
        EMImportChatGroupMessageResult response = messageApi.importChatGroupMessage(emImportChatUserMessage);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getMsgId());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 导入单聊消息
     *
     * 你可以在数据迁移时导入单聊消息。每次调用该接口只能导入一条消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_import.html#%E5%AF%BC%E5%85%A5%E5%8D%95%E8%81%8A%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importChatUserMessageTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMImportChatUserMessage emImportChatUserMessage = new EMImportChatUserMessage();
        emImportChatUserMessage.setFrom(username2);
        emImportChatUserMessage.setTarget(username1);
        emImportChatUserMessage.setType("txt");
        emImportChatUserMessage.setIsAckRead(true);
        emImportChatUserMessage.setMsgTimestamp(new BigDecimal(System.currentTimeMillis()));
        emImportChatUserMessage.needDownload(false);
        emImportChatUserMessage.body(new EMMessageContent().msg("test message1"));

        EMImportChatUserMessageResult response = messageApi.importChatUserMessage(emImportChatUserMessage);
        assertNotNull(response.getData());
        assertNotNull(response.getData().getMsgId());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 单向删除会话
     *
     * 该方法使聊天用户能够从服务器中删除会话。删除会话后，该用户将从服务器获取不到该会话。该会话的其他参与聊天用户仍然可以从服务器获取会话内容。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E5%8D%95%E5%90%91%E5%88%A0%E9%99%A4%E4%BC%9A%E8%AF%9D
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneWayDeleteConversationTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult sendMessageResponse = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(sendMessageResponse.getData());

        EMOneWayDeleteConversation emOneWayDeleteConversation = new EMOneWayDeleteConversation();
        emOneWayDeleteConversation.setChannel(username2);
        emOneWayDeleteConversation.setType("chat");
        emOneWayDeleteConversation.setDeleteRoam(true);

        EMOneWayDeleteConversationResult response = messageApi.oneWayDeleteConversation(username1, emOneWayDeleteConversation);
        assertNotNull(response.getData());
        assertEquals("ok", response.getData().getResult());

        EMOneWayDeleteConversation emOneWayDeleteConversation1 = new EMOneWayDeleteConversation();
        emOneWayDeleteConversation1.setChannel(username1);
        emOneWayDeleteConversation1.setType("chat");
        emOneWayDeleteConversation1.setDeleteRoam(true);
        EMOneWayDeleteConversationResult response1 = messageApi.oneWayDeleteConversation(username2, emOneWayDeleteConversation1);
        assertNotNull(response1.getData());
        assertEquals("ok", response1.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 撤回消息
     *
     * 发送方可以撤回一条发送成功的消息。默认情况下，发送方可撤回发出 2 分钟内的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_recall.html#%E6%92%A4%E5%9B%9E%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void recallMessageTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult sendMessageResponse = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(sendMessageResponse.getData());
        Map<String, String> data = (Map<String, String>) sendMessageResponse.getData();
        String messageId = data.get(username2);

        EMRecallMessage emRecallMessage = new EMRecallMessage();
        emRecallMessage.setFrom(username1);
        emRecallMessage.setMsgId(messageId);
        emRecallMessage.setTo(username2);
        emRecallMessage.setChatType("chat");
        emRecallMessage.setForce(true);
        EMRecallMessageResult response = messageApi.recallMessage(emRecallMessage);
        assertNotNull(response.getData());
        assertEquals("yes", response.getData().getRecalled());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送群聊文本消息
     *
     * 向群组发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E6%96%87%E6%9C%AC%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTextMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊图片消息
     *
     * 向群组发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendImageMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        File imageFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath());

        EMUploadChatFileResult uploadImageChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, imageFile));
        String imageChatFileUuid = uploadImageChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("img");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("img.png");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + imageChatFileUuid);
        messageContent.setSize(new EMImageSize().height(192).width(170));

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊语音消息
     *
     * 向群组发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E8%AF%AD%E9%9F%B3%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVoiceMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/voice.amr")).getPath());
        Boolean restrictAccess = false;

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(restrictAccess, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("audio");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("voice.amr");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);
        messageContent.length(3);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊视频消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E8%A7%86%E9%A2%91%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVideoMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        File imageFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath());

        EMUploadChatFileResult uploadImageChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, imageFile));
        String imageChatFileUuid = uploadImageChatFileResult.getEntities().get(0).getUuid();

        File videoFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/video.mp4")).getPath());

        EMUploadChatFileResult uploadVideoChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, videoFile));
        String videoChatFileUuid = uploadVideoChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("video");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("video.mp4");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + videoChatFileUuid);
        messageContent.setLength(3);
        messageContent.setFileLength(264562);
        messageContent.setThumb(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + imageChatFileUuid);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊文件消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendFileMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/file.txt")).getPath());

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("file");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("file.txt");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊位置消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E4%BD%8D%E7%BD%AE%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendLocationMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("loc");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setLat("39.966");
        messageContent.setLng("116.322");
        messageContent.setAddr("中国北京市海淀区中关村");

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊透传消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E9%80%8F%E4%BC%A0%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCmdMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("cmd");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setAction("action");

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊自定义消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_group.html#%E5%8F%91%E9%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCustomMessagesToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("custom");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setCustomEvent("custom_event");
        messageContent.setCustomExts(Collections.singletonMap("custom_key", "custom_value"));

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送群聊定向消息
     *
     * 向群组中指定成员发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_group.html
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessagesToGroupDirectionalMemberTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);
        emCreateMessage.setUsers(Collections.singletonList(username2));

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendGroupDirectionalMessages(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室文本消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTextMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室图片消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendImageMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath());
        Boolean restrictAccess = false;

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(restrictAccess, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("img");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("img.png");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);
        messageContent.setSize(new EMImageSize().height(192).width(170));

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室语音消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E8%AF%AD%E9%9F%B3%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVoiceMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/voice.amr")).getPath());
        Boolean restrictAccess = false;

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(restrictAccess, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("audio");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("voice.amr");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);
        messageContent.setLength(3);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室视频消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E8%A7%86%E9%A2%91%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVideoMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        File imageFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath());

        EMUploadChatFileResult uploadImageChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, imageFile));
        String imageChatFileUuid = uploadImageChatFileResult.getEntities().get(0).getUuid();

        File videoFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/video.mp4")).getPath());

        EMUploadChatFileResult uploadVideoChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, videoFile));
        String videoChatFileUuid = uploadVideoChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("video");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("video.mp4");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + videoChatFileUuid);
        messageContent.setLength(3);
        messageContent.setFileLength(264562);
        messageContent.setThumb(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + imageChatFileUuid);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室文件消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendFileMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/file.txt")).getPath());

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("file");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("file.txt");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室位置消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E4%BD%8D%E7%BD%AE%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendLocationMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("loc");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setLat("39.966");
        messageContent.setLng("116.322");
        messageContent.setAddr("中国北京市海淀区中关村");

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室透传消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E9%80%8F%E4%BC%A0%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCmdMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("cmd");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setAction("action");

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室自定义消息
     *
     * 向聊天室发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_chatroom.html#%E5%8F%91%E9%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCustomMessagesToRoomTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("custom");

        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setCustomEvent("custom_event");
        messageContent.setCustomExts(Collections.singletonMap("custom_key", "custom_value"));

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToRoom(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送聊天室定向消息
     *
     * 向聊天室指定成员发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/message_chatroom.html
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendMessagesToRoomDirectionalMemberTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateRoom createRoom = new EMCreateRoom();
        createRoom.setOwner(username1);
        createRoom.setName("test-room");
        createRoom.setDescription("元梦之星");
        createRoom.setMaxusers(200);
        createRoom.setMembers(Arrays.asList(username2));
        createRoom.setCustom("custom");

        EMCreateRoomResult createRoomResult= assertDoesNotThrow(() -> roomApi.createRoom(createRoom));
        assertNotNull(createRoomResult);
        assertNotNull(createRoomResult.getData());
        assertNotNull(createRoomResult.getData().getId());

        String roomId = createRoomResult.getData().getId();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(roomId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);
        emCreateMessage.setUsers(Collections.singletonList(username2));

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendRoomDirectionalMessages(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            roomApi.deleteRoom(roomId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 发送单聊文本消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E6%96%87%E6%9C%AC%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTextMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊图片消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E5%9B%BE%E7%89%87%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendImageMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath());
        Boolean restrictAccess = false;

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(restrictAccess, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("img");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("img.png");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);
        messageContent.setSize(new EMImageSize().height(192).width(170));

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊语音消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E8%AF%AD%E9%9F%B3%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVoiceMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/voice.amr")).getPath());
        Boolean restrictAccess = false;

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(restrictAccess, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("audio");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("voice.amr");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);
        messageContent.setLength(3);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊视频消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E8%A7%86%E9%A2%91%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendVideoMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        File imageFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath());

        EMUploadChatFileResult uploadImageChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, imageFile));
        String imageChatFileUuid = uploadImageChatFileResult.getEntities().get(0).getUuid();

        File videoFile = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/video.mp4")).getPath());

        EMUploadChatFileResult uploadVideoChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, videoFile));
        String videoChatFileUuid = uploadVideoChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("video");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("video.mp4");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + videoChatFileUuid);
        messageContent.setLength(3);
        messageContent.setFileLength(264562);
        messageContent.setThumb(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + imageChatFileUuid);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊文件消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E6%96%87%E4%BB%B6%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendFileMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        File file = new File(Objects.requireNonNull(
                ClassLoaderUtils.getDefaultClassLoader().getResource("upload/file.txt")).getPath());

        EMUploadChatFileResult uploadChatFileResult = assertDoesNotThrow(() -> chatFileApi.uploadChatFile(false, file));
        String chatFileUuid = uploadChatFileResult.getEntities().get(0).getUuid();

        String baseUri = System.getenv("IM_BASE_URI");
        String appKey = System.getenv("IM_APPKEY");
        String orgName = appKey.split("#")[0];
        String appName = appKey.split("#")[1];

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("file");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setFilename("file.txt");
        messageContent.setUrl(baseUri + "/" + orgName + "/" + appName + "/chatfiles/" + chatFileUuid);

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊位置消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E4%BD%8D%E7%BD%AE%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendLocationMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("loc");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setLat("39.966");
        messageContent.setLng("116.322");
        messageContent.setAddr("中国北京市海淀区中关村");

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊透传消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E9%80%8F%E4%BC%A0%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCmdMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("cmd");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setAction("action");

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 发送单聊自定义消息
     *
     * 给用户发送消息。文档介绍：https://doc.easemob.com/document/server-side/message_single.html#%E5%8F%91%E9%80%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendCustomMessagesToUserTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("custom");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setCustomEvent("custom_event");
        messageContent.setCustomExts(Collections.singletonMap("custom_key", "custom_value"));

        emCreateMessage.setBody(messageContent);

        Map<String, Object> ext = new HashMap<>();
        ext.put("key", "value");
        ext.put("key1", true);
        ext.put("key2", 1);
        ext.put("key3", Collections.singletonList("tom"));
        ext.put("key4", Collections.singletonMap("name", "jack"));

        emCreateMessage.setExt(ext);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 修改文本或自定义消息
     *
     * 修改发送成功的文本消息或自定义消息。若使用该功能，需联系环信商务开通。文档介绍：https://doc.easemob.com/document/server-side/message_modify_text_custom.html
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyTextOrCustomizeMessageTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        String msgId = ((Map<String, String>) response.getData()).get(username2);
        EMModifyTextOrCustomizeMessage emModifyTextOrCustomizeMessage = new EMModifyTextOrCustomizeMessage();
        EMNewMessage newMessage = new EMNewMessage();
        newMessage.setType("txt");
        newMessage.setMsg("你好!");

        emModifyTextOrCustomizeMessage.setUser(username1);
        emModifyTextOrCustomizeMessage.setNewMsg(newMessage);
        emModifyTextOrCustomizeMessage.setIsCombineExt(true);

        EMModifyTextOrCustomizeMessageResult customizeMessageResult = messageApi.modifyTextOrCustomizeMessage(msgId, emModifyTextOrCustomizeMessage);
        assertNotNull(customizeMessageResult.getData());
        assertEquals("success", customizeMessageResult.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

    }

    /**
     * 单向清空指定群组或聊天室会话一段时间内的漫游消息
     *
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%BE%A4%E7%BB%84%E6%88%96%E8%81%8A%E5%A4%A9%E5%AE%A4%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneWayClearGroupOrRoomRoamingMessagesWithinPeriodTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());

        BigDecimal delTime = BigDecimal.valueOf(System.currentTimeMillis());
        EMOneWayClearGroupOrRoomRoamingMessagesWithinPeriodResult result = messageApi.oneWayClearGroupOrRoomRoamingMessagesWithinPeriod(username1, groupId, delTime);
        assertNotNull(result.getRequestStatusCode());
        assertEquals("ok", result.getRequestStatusCode());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 单向清空指定用户的漫游消息
     *
     * 清空后，该用户无法从服务端拉取到漫游消息，而且该用户的所有会话也会被清除，也拉不到会话列表。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneWayClearUserRoamingMessagesTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        EMOneWayClearUserRoamingMessagesResult result = messageApi.oneWayClearUserRoamingMessages(username1);
        assertNotNull(result.getRequestStatusCode());
        assertEquals("ok", result.getRequestStatusCode());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

    /**
     * 单向清空指定单聊会话一段时间内的漫游消息
     *
     * 将传入时间戳之前的漫游消息清空，清空后，该用户无法从环信服务端拉取到这些漫游消息。若清除了该会话的全部漫游消息，该用户的这个会话在服务端也会被清除，拉取会话列表时拉不到该会话。不过，其他用户不受影响，仍然可以拉取与该用户的漫游消息和会话。文档介绍：https://doc.easemob.com/document/server-side/message_roam_clear.html#%E5%8D%95%E5%90%91%E6%B8%85%E7%A9%BA%E6%8C%87%E5%AE%9A%E5%8D%95%E8%81%8A%E4%BC%9A%E8%AF%9D%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%86%85%E7%9A%84%E6%BC%AB%E6%B8%B8%E6%B6%88%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneWayClearUserRoamingMessagesWithinPeriodTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(username2));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToUser(emCreateMessage);
        assertNotNull(response.getData());

        BigDecimal delTime = BigDecimal.valueOf(System.currentTimeMillis());
        EMOneWayClearUserRoamingMessagesWithinPeriodResult result = messageApi.oneWayClearUserRoamingMessagesWithinPeriod(username1, username2, delTime);
        assertNotNull(result.getRequestStatusCode());
        assertEquals("ok", result.getRequestStatusCode());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
    }

}
