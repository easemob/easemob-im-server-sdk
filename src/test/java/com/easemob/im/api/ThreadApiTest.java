/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiException;
import com.easemob.im.api.model.*;
import org.junit.jupiter.api.Test;

import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for ThreadApi
 */
public class ThreadApiTest extends AbstractTest {

    private final ThreadApi api = new ThreadApi();

    private final GroupApi groupApi = new GroupApi();

    private final UserApi userApi = new UserApi();

    private final MessageApi messageApi = new MessageApi();

    /**
     * 用户批量加入子区
     *
     * 用户批量加入指定的子区。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E7%94%A8%E6%88%B7%E6%89%B9%E9%87%8F%E5%8A%A0%E5%85%A5%E5%AD%90%E5%8C%BA
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleUsersToThreadTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username1);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMAddMultipleUsersToThread addMultipleUsersToThread = new EMAddMultipleUsersToThread();
        addMultipleUsersToThread.setUsernames(Arrays.asList(username2));

        EMAddMultipleUsersToThreadResult addMultipleUsersToThreadResult =
                assertDoesNotThrow(() -> api.addMultipleUsersToThread(threadId, addMultipleUsersToThread));
        assertNotNull(addMultipleUsersToThreadResult);
        assertNotNull(addMultipleUsersToThreadResult.getData());
        assertEquals("ok", addMultipleUsersToThreadResult.getData().getStatus());

        EMRemoveMultipleUsersFromThread removeMultipleUsersFromThread = new EMRemoveMultipleUsersFromThread();
        removeMultipleUsersFromThread.setUsernames(Arrays.asList(username2));

        EMRemoveMultipleUsersFromThreadResult removeMultipleUsersFromThreadResult =
                assertDoesNotThrow(() -> api.removeMultipleUsersFromThread(threadId, removeMultipleUsersFromThread));
        assertNotNull(removeMultipleUsersFromThreadResult);
        assertNotNull(removeMultipleUsersFromThreadResult.getEntities());
        assertEquals(true, removeMultipleUsersFromThreadResult.getEntities().get(0).getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 创建子区
     *
     * 创建子区。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%88%9B%E5%BB%BA%E5%AD%90%E5%8C%BA
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createThreadTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username2);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 删除子区
     *
     * 删除指定子区。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%88%A0%E9%99%A4%E5%AD%90%E5%8C%BA
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteThreadTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username2);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMDeleteThreadResult deleteThreadResult =
                assertDoesNotThrow(() -> api.deleteThread(threadId));
        assertNotNull(deleteThreadResult);
        assertNotNull(deleteThreadResult.getData());
        assertEquals("ok", deleteThreadResult.getData().getStatus());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取子区成员列表(分页)
     *
     * 分页获取应用下的子区列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E5%AD%90%E5%8C%BA%E6%88%90%E5%91%98%E5%88%97%E8%A1%A8-%E5%88%86%E9%A1%B5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThreadMemberListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username1);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMAddMultipleUsersToThread addMultipleUsersToThread = new EMAddMultipleUsersToThread();
        addMultipleUsersToThread.setUsernames(Arrays.asList(username2));

        EMAddMultipleUsersToThreadResult addMultipleUsersToThreadResult =
                assertDoesNotThrow(() -> api.addMultipleUsersToThread(threadId, addMultipleUsersToThread));
        assertNotNull(addMultipleUsersToThreadResult);
        assertNotNull(addMultipleUsersToThreadResult.getData());
        assertEquals("ok", addMultipleUsersToThreadResult.getData().getStatus());

        EMGetThreadMemberListResult getThreadMemberListResult =
                assertDoesNotThrow(() -> api.getThreadMemberList(threadId, 2, null));
        assertNotNull(getThreadMemberListResult);
        assertNotNull(getThreadMemberListResult.getData());
        assertNotNull(getThreadMemberListResult.getProperties());
        assertNotNull(getThreadMemberListResult.getProperties().getCursor());
        assertEquals(2, getThreadMemberListResult.getData().getAffiliations().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取 app 中的子区
     *
     * 分页获取应用下的子区列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96-app-%E4%B8%AD%E7%9A%84%E5%AD%90%E5%8C%BA
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThreadsUnderAppTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username1);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMAddMultipleUsersToThread addMultipleUsersToThread = new EMAddMultipleUsersToThread();
        addMultipleUsersToThread.setUsernames(Arrays.asList(username2));

        EMAddMultipleUsersToThreadResult addMultipleUsersToThreadResult =
                assertDoesNotThrow(() -> api.addMultipleUsersToThread(threadId, addMultipleUsersToThread));
        assertNotNull(addMultipleUsersToThreadResult);
        assertNotNull(addMultipleUsersToThreadResult.getData());
        assertEquals("ok", addMultipleUsersToThreadResult.getData().getStatus());

        EMGetThreadsUnderAppResult getThreadsUnderAppResult =
                assertDoesNotThrow(() -> api.getThreadsUnderApp(1, null, "asc"));
        assertNotNull(getThreadsUnderAppResult);
        assertNotNull(getThreadsUnderAppResult.getEntities());
        assertNotNull(getThreadsUnderAppResult.getProperties());
        assertNotNull(getThreadsUnderAppResult.getProperties().getCursor());
        assertEquals(1, getThreadsUnderAppResult.getEntities().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取单个用户加入的所有子区（分页获取）
     *
     * 根据用户 ID 获取该用户加入的所有子区。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8A%A0%E5%85%A5%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E5%8C%BA-%E5%88%86%E9%A1%B5%E8%8E%B7%E5%8F%96
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserJoinedThreadsTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username1);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMAddMultipleUsersToThread addMultipleUsersToThread = new EMAddMultipleUsersToThread();
        addMultipleUsersToThread.setUsernames(Arrays.asList(username2));

        EMAddMultipleUsersToThreadResult addMultipleUsersToThreadResult =
                assertDoesNotThrow(() -> api.addMultipleUsersToThread(threadId, addMultipleUsersToThread));
        assertNotNull(addMultipleUsersToThreadResult);
        assertNotNull(addMultipleUsersToThreadResult.getData());
        assertEquals("ok", addMultipleUsersToThreadResult.getData().getStatus());

        EMGetUserJoinedThreadsResult getUserJoinedThreadsResult =
                assertDoesNotThrow(() -> api.getUserJoinedThreads(username1, 1, null, "asc"));
        assertNotNull(getUserJoinedThreadsResult);
        assertNotNull(getUserJoinedThreadsResult.getEntities());
        assertNotNull(getUserJoinedThreadsResult.getProperties());
        assertNotNull(getUserJoinedThreadsResult.getProperties().getCursor());
        assertEquals(1, getUserJoinedThreadsResult.getEntities().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取单个用户在指定群组中加入的所有子区 (分页获取)
     *
     * 根据用户 ID 获取该用户在指定群组中加入的所有子区。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%9C%A8%E6%8C%87%E5%AE%9A%E7%BE%A4%E7%BB%84%E4%B8%AD%E5%8A%A0%E5%85%A5%E7%9A%84%E6%89%80%E6%9C%89%E5%AD%90%E5%8C%BA-%E5%88%86%E9%A1%B5%E8%8E%B7%E5%8F%96
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserJoinedThreadsUnderGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username1);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMAddMultipleUsersToThread addMultipleUsersToThread = new EMAddMultipleUsersToThread();
        addMultipleUsersToThread.setUsernames(Arrays.asList(username2));

        EMAddMultipleUsersToThreadResult addMultipleUsersToThreadResult =
                assertDoesNotThrow(() -> api.addMultipleUsersToThread(threadId, addMultipleUsersToThread));
        assertNotNull(addMultipleUsersToThreadResult);
        assertNotNull(addMultipleUsersToThreadResult.getData());
        assertEquals("ok", addMultipleUsersToThreadResult.getData().getStatus());

        EMGetUserJoinedThreadsUnderGroupResult getUserJoinedThreadsUnderGroupResult =
                assertDoesNotThrow(() -> api.getUserJoinedThreadsUnderGroup(groupId, username1, 1, null, "asc"));
        assertNotNull(getUserJoinedThreadsUnderGroupResult);
        assertNotNull(getUserJoinedThreadsUnderGroupResult.getEntities());
        assertNotNull(getUserJoinedThreadsUnderGroupResult.getProperties());
        assertNotNull(getUserJoinedThreadsUnderGroupResult.getProperties().getCursor());
        assertEquals(1, getUserJoinedThreadsUnderGroupResult.getEntities().size());
        assertEquals(threadId, getUserJoinedThreadsUnderGroupResult.getEntities().get(0).getId());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 修改子区
     *
     * 分页获取应用下的子区列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%BF%AE%E6%94%B9%E5%AD%90%E5%8C%BA
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyThreadTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username2);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMModifyThread modifyThread = new EMModifyThread();
        modifyThread.setName("modify thread name");

        EMModifyThreadResult modifyThreadResult =
                assertDoesNotThrow(() -> api.modifyThread(threadId, modifyThread));
        assertNotNull(modifyThreadResult);
        assertNotNull(modifyThreadResult.getData());
        assertEquals("modify thread name", modifyThreadResult.getData().getName());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 批量踢出子区成员
     *
     * 批量踢出子区成员。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%89%B9%E9%87%8F%E8%B8%A2%E5%87%BA%E5%AD%90%E5%8C%BA%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeMultipleUsersFromThreadTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> groupApi.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMCreateMessage emCreateMessage = new EMCreateMessage();
        emCreateMessage.setFrom(username1);
        emCreateMessage.setTo(Collections.singletonList(groupId));
        emCreateMessage.setType("txt");
        EMMessageContent messageContent = new EMMessageContent();
        messageContent.setMsg("test message");
        emCreateMessage.setBody(messageContent);

        EMSendMessageResult response = messageApi.sendMessagesToGroup(emCreateMessage);
        assertNotNull(response.getData());
        Map<String, Object> data = (Map<String, Object>) response.getData();

        String messageId = data.get(groupId).toString();

        EMCreateThread createThread = new EMCreateThread();
        createThread.setGroupId(groupId);
        createThread.setOwner(username1);
        createThread.setMsgId(messageId);
        createThread.setName("test-thread");

        EMCreateThreadResult createThreadResult =
                assertDoesNotThrow(() -> api.createThread(createThread));
        assertNotNull(createThreadResult);
        assertNotNull(createThreadResult.getData());
        assertNotNull(createThreadResult.getData().getThreadId());

        String threadId = createThreadResult.getData().getThreadId();

        EMAddMultipleUsersToThread addMultipleUsersToThread = new EMAddMultipleUsersToThread();
        addMultipleUsersToThread.setUsernames(Arrays.asList(username2));

        EMAddMultipleUsersToThreadResult addMultipleUsersToThreadResult =
                assertDoesNotThrow(() -> api.addMultipleUsersToThread(threadId, addMultipleUsersToThread));
        assertNotNull(addMultipleUsersToThreadResult);
        assertNotNull(addMultipleUsersToThreadResult.getData());
        assertEquals("ok", addMultipleUsersToThreadResult.getData().getStatus());

        EMRemoveMultipleUsersFromThread removeMultipleUsersFromThread = new EMRemoveMultipleUsersFromThread();
        removeMultipleUsersFromThread.setUsernames(Arrays.asList(username2));

        EMRemoveMultipleUsersFromThreadResult removeMultipleUsersFromThreadResult =
                assertDoesNotThrow(() -> api.removeMultipleUsersFromThread(threadId, removeMultipleUsersFromThread));
        assertNotNull(removeMultipleUsersFromThreadResult);
        assertNotNull(removeMultipleUsersFromThreadResult.getEntities());
        assertEquals(true, removeMultipleUsersFromThreadResult.getEntities().get(0).getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            groupApi.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

}
