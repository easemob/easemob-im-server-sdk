/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiException;
import com.easemob.im.api.model.*;
import org.junit.jupiter.api.Test;
import org.junit.platform.commons.util.ClassLoaderUtils;

import java.io.File;
import java.math.BigDecimal;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for GroupApi
 */
public class GroupApiTest extends AbstractTest {

    private final UserApi userApi = new UserApi();

    private final GroupApi api = new GroupApi();

    public GroupApiTest() {
    }

    /**
     * 添加群管理员
     * <p>
     * 将一个普通群成员设为为群管理员。群管理员有管理黑名单、禁言等权限。最多可以添加 99 个群管理员。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%B7%BB%E5%8A%A0%E7%BE%A4%E7%AE%A1%E7%90%86%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupAdminTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddGroupAdmin addGroupAdmin = new EMAddGroupAdmin();
        addGroupAdmin.newadmin(username2);
        EMAddGroupAdminResult addGroupAdminResult =
                assertDoesNotThrow(() -> api.addGroupAdmin(groupId, addGroupAdmin));
        assertNotNull(addGroupAdminResult);
        assertNotNull(addGroupAdminResult.getData());
        assertNotNull(addGroupAdminResult.getData().getResult());
        assertEquals("success", addGroupAdminResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 批量添加群组成员
     * <p>
     * 一次为群组添加多个成员，每次最多可以添加 60 位成员。如果所有用户均已是群成员，添加失败，返回错误。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E7%BE%A4%E7%BB%84%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleUserToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddMultipleUserToGroup emAddMultipleUserToGroup = new EMAddMultipleUserToGroup();
        emAddMultipleUserToGroup.setUsernames(Arrays.asList(username3));
        EMAddMultipleUserToGroupResult addMultipleUserToGroup =
                api.addMultipleUserToGroup(groupId, emAddMultipleUserToGroup);
        assertNotNull(addMultipleUserToGroup);
        assertNotNull(addMultipleUserToGroup.getData());
        assertNotNull(addMultipleUserToGroup.getData().getNewmembers());
        assertEquals(1, addMultipleUserToGroup.getData().getNewmembers().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        assertDoesNotThrow(() -> userApi.deleteUser(username3));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 批量添加用户至群组黑名单
     * <p>
     * 将多个用户添加至群组黑名单，一次最多可以添加 60 个用户。群主无法被加入群组的黑名单。用户进入群组黑名单后会收到加入黑名单的回调。黑名单上的用户无法查看该群组的信息，也收不到该群组的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%87%B3%E7%BE%A4%E7%BB%84%E9%BB%91%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleUserToGroupBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddMultipleUserToGroupBlockList emAddMultipleUserToGroupBlockList =
                new EMAddMultipleUserToGroupBlockList();
        emAddMultipleUserToGroupBlockList.setUsernames(Arrays.asList(username2));
        EMAddMultipleUserToGroupBlockListResult addMultipleUserToGroupBlockListResult =
                assertDoesNotThrow(() -> api.addMultipleUserToGroupBlockList(groupId,
                        emAddMultipleUserToGroupBlockList));
        assertNotNull(addMultipleUserToGroupBlockListResult);
        assertNotNull(addMultipleUserToGroupBlockListResult.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 批量添加用户至群组白名单
     * <p>
     * 添加多个用户至群组白名单。你一次最多可添加 60 个用户。用户添加至白名单后在群组全员禁言时仍可以在群组中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%89%B9%E9%87%8F%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7%E8%87%B3%E7%BE%A4%E7%BB%84%E7%99%BD%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addMultipleUserToGroupWhiteListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddMultipleUserToGroupWhiteList emAddMultipleUserToGroupWhiteList =
                new EMAddMultipleUserToGroupWhiteList();
        emAddMultipleUserToGroupWhiteList.setUsernames(Arrays.asList(username2));
        EMAddMultipleUserToGroupWhiteListResult addMultipleUserToGroupWhiteListResult =
                assertDoesNotThrow(() -> api.addMultipleUserToGroupWhiteList(groupId,
                        emAddMultipleUserToGroupWhiteList));
        assertNotNull(addMultipleUserToGroupWhiteListResult);
        assertNotNull(addMultipleUserToGroupWhiteListResult.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 添加单个群组成员
     * <p>
     * 每次添加一个群成员。若添加的用户已是群成员，则添加失败，返回错误。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%B8%AA%E7%BE%A4%E7%BB%84%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddUserToGroupResult addUserToGroupResult =
                assertDoesNotThrow(() -> api.addUserToGroup(groupId, username3));
        assertNotNull(addUserToGroupResult);
        assertNotNull(addUserToGroupResult.getData());
        assertNotNull(addUserToGroupResult.getData().getResult());
        assertEquals(true, addUserToGroupResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        assertDoesNotThrow(() -> userApi.deleteUser(username3));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 添加单个用户至群组黑名单
     * <p>
     * 将单个用户添加至群组黑名单。群主无法被加入群组的黑名单。用户进入群组黑名单后会收到加入黑名单的回调。之后，该用户无法查看该群组的信息，也收不到该群组的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%B7%BB%E5%8A%A0%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E8%87%B3%E7%BE%A4%E7%BB%84%E9%BB%91%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToGroupBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddUserToGroupBlockListResult addUserToGroupBlockListResult =
                assertDoesNotThrow(() -> api.addUserToGroupBlockList(groupId, username2));
        assertNotNull(addUserToGroupBlockListResult);
        assertNotNull(addUserToGroupBlockListResult.getData());
        assertNotNull(addUserToGroupBlockListResult.getData().getResult());
        assertEquals(true, addUserToGroupBlockListResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 添加单个用户至群组白名单
     * <p>
     * 将指定的单个用户添加至群组白名单。用户添加至群组白名单后，当群组全员被禁言时，仍可以在群组中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%9F%A5%E8%AF%A2%E7%BE%A4%E7%BB%84%E7%99%BD%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addUserToGroupWhiteListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMAddUserToGroupWhiteListResult addUserToGroupWhiteListResult =
                assertDoesNotThrow(() -> api.addUserToGroupWhiteList(groupId, username2));
        assertNotNull(addUserToGroupWhiteListResult);
        assertNotNull(addUserToGroupWhiteListResult.getData());
        assertNotNull(addUserToGroupWhiteListResult.getData().getResult());
        assertEquals(true, addUserToGroupWhiteListResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 查看指定用户是否已加入群组
     * <p>
     * 查看单个用户是否已加入了指定的群组。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%9F%A5%E7%9C%8B%E6%8C%87%E5%AE%9A%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%B7%B2%E5%8A%A0%E5%85%A5%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkUserJoinedGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMCheckUserJoinedGroupResult checkUserJoinedGroupResult =
                assertDoesNotThrow(() -> api.checkUserJoinedGroup(groupId, username2));
        assertNotNull(checkUserJoinedGroupResult);
        assertNotNull(checkUserJoinedGroupResult.getData());
        assertEquals(true, checkUserJoinedGroupResult.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 创建群组
     * <p>
     * 创建一个群组，并设置群组名称、群组描述、公开群/私有群属性、群成员最大人数（包括群主）、加入公开群是否需要批准、群主、群成员和群组扩展信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%88%9B%E5%BB%BA%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";
        String groupAvatar1 = "https://example.com/avatar1.png";
        String groupAvatar2 = "https://example.com/avatar2.png";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setAvatar(groupAvatar1);
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMGetGroupInfoResult groupInfoResult1 =
                assertDoesNotThrow(() -> api.getGroupInfo(groupId));
        assertNotNull(groupInfoResult1);
        assertNotNull(groupInfoResult1.getData());
        assertNotNull(groupInfoResult1.getData().get(0));
        assertEquals(groupAvatar1, groupInfoResult1.getData().get(0).getAvatar());

        EMModifyGroup modifyGroup = new EMModifyGroup();
        modifyGroup.setAvatar(groupAvatar2);

        assertDoesNotThrow(() -> api.modifyGroup(groupId, modifyGroup));

        EMGetGroupInfoResult groupInfoResult2 =
                assertDoesNotThrow(() -> api.getGroupInfo(groupId));
        assertNotNull(groupInfoResult2);
        assertNotNull(groupInfoResult2.getData());
        assertNotNull(groupInfoResult2.getData().get(0));
        assertEquals(groupAvatar2, groupInfoResult2.getData().get(0).getAvatar());

        EMGetUserJoinedGroupsResult getUserJoinedGroupsResult =
                assertDoesNotThrow(() -> api.getUserJoinedGroups(username1, 0, 1));
        assertNotNull(getUserJoinedGroupsResult);
        assertNotNull(getUserJoinedGroupsResult.getEntities());
        assertNotNull(getUserJoinedGroupsResult.getEntities().get(0));
        assertEquals(groupAvatar2, getUserJoinedGroupsResult.getEntities().get(0).getAvatar());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 创建群组，自定义群组id
     * <p>
     * 创建一个群组，并设置自定义群组id、群组名称、群组描述、公开群/私有群属性、群成员最大人数（包括群主）、加入公开群是否需要批准、群主、群成员和群组扩展信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%88%9B%E5%BB%BA%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void customIdCreateGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";
        String customGroupId = "123456666";
        String groupAvatar1 = "https://example.com/avatar1.png";
        String groupAvatar2 = "https://example.com/avatar2.png";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setGroupid(customGroupId);
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setAvatar(groupAvatar1);
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());
        assertEquals(customGroupId, createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMGetGroupInfoResult groupInfoResult1 =
                assertDoesNotThrow(() -> api.getGroupInfo(groupId));
        assertNotNull(groupInfoResult1);
        assertNotNull(groupInfoResult1.getData());
        assertNotNull(groupInfoResult1.getData().get(0));
        assertEquals(groupAvatar1, groupInfoResult1.getData().get(0).getAvatar());

        EMModifyGroup modifyGroup = new EMModifyGroup();
        modifyGroup.setAvatar(groupAvatar2);

        assertDoesNotThrow(() -> api.modifyGroup(groupId, modifyGroup));

        EMGetGroupInfoResult groupInfoResult2 =
                assertDoesNotThrow(() -> api.getGroupInfo(groupId));
        assertNotNull(groupInfoResult2);
        assertNotNull(groupInfoResult2.getData());
        assertNotNull(groupInfoResult2.getData().get(0));
        assertEquals(groupAvatar2, groupInfoResult2.getData().get(0).getAvatar());

        EMGetUserJoinedGroupsResult getUserJoinedGroupsResult =
                assertDoesNotThrow(() -> api.getUserJoinedGroups(username1, 0, 1));
        assertNotNull(getUserJoinedGroupsResult);
        assertNotNull(getUserJoinedGroupsResult.getEntities());
        assertNotNull(getUserJoinedGroupsResult.getEntities().get(0));
        assertEquals(groupAvatar2, getUserJoinedGroupsResult.getEntities().get(0).getAvatar());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 删除群组
     * <p>
     * 删除指定的群组。删除群组时会同时删除群组下所有的子区（Thread）。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%88%A0%E9%99%A4%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        try {
            EMDeleteGroupResult deleteGroupResult = api.deleteGroup(groupId);
            assertNotNull(deleteGroupResult);
            assertNotNull(deleteGroupResult.getData());
            assertNotNull(deleteGroupResult.getData().getSuccess());
            assertEquals(true, deleteGroupResult.getData().getSuccess());
            assertEquals(groupId, deleteGroupResult.getData().getGroupid());
        } catch (ApiException ignored) {
        }

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));

    }

    /**
     * 删除群组共享文件
     * <p>
     * 根据指定的群组 ID 与 文件 ID（file_id）删除群组共享文件，文件 ID 可从 获取群组共享文件 接口的响应中获取。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%88%A0%E9%99%A4%E7%BE%A4%E7%BB%84%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupShareFileTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMUploadGroupShareFileResult uploadGroupShareFileResult = assertDoesNotThrow(
                () -> api.uploadGroupShareFile(groupId, new File(Objects.requireNonNull(
                        ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath())));
        assertNotNull(uploadGroupShareFileResult);
        assertNotNull(uploadGroupShareFileResult.getData());
        assertNotNull(uploadGroupShareFileResult.getData().getFileId());

        String fileId = uploadGroupShareFileResult.getData().getFileId();

        EMDeleteGroupShareFileResult deleteGroupShareFileResult =
                assertDoesNotThrow(() -> api.deleteGroupShareFile(groupId, fileId));
        assertNotNull(deleteGroupShareFileResult);
        assertNotNull(deleteGroupShareFileResult.getData());
        assertEquals(true, deleteGroupShareFileResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 封禁群组
     * <p>
     * 封禁指定的群组。例如，群成员经常在群中发送违规消息，可以调用该 API 对该群进行封禁。群组被封禁后，群中任何成员均无法在群组以及该群组下的子区中发送和接收消息，也无法进行群组和子区管理操作。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E5%B0%81%E7%A6%81%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMDisableGroupResult disableGroupResult =
                assertDoesNotThrow(() -> api.disableGroup(groupId));
        assertNotNull(disableGroupResult);
        assertNotNull(disableGroupResult.getData());
        assertEquals(true, disableGroupResult.getData().getDisabled());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 下载群组共享文件
     * <p>
     * 根据指定的群组 ID 与文件 ID（file_id）下载群组共享文件，文件 ID 可从 获取群组共享文件 接口的响应中获取。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%B8%8B%E8%BD%BD%E7%BE%A4%E7%BB%84%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadGroupShareFileTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMUploadGroupShareFileResult uploadGroupShareFileResult = assertDoesNotThrow(
                () -> api.uploadGroupShareFile(groupId, new File(Objects.requireNonNull(
                        ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath())));
        assertNotNull(uploadGroupShareFileResult);
        assertNotNull(uploadGroupShareFileResult.getData());
        assertNotNull(uploadGroupShareFileResult.getData().getFileId());

        String fileId = uploadGroupShareFileResult.getData().getFileId();
        File file = assertDoesNotThrow(() -> api.downloadGroupShareFile(groupId, fileId));
        assertNotNull(file);
        assertTrue(file.delete());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 封禁群组
     * <p>
     * 解除对指定群组的封禁。群组解禁后，群成员可以在该群组以及该群组下的子区中发送和接收消息并进行群组和子区管理相关操作。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%A7%A3%E7%A6%81%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMEnableGroupResult enableGroupResult = assertDoesNotThrow(() -> api.enableGroup(groupId));
        assertNotNull(enableGroupResult);
        assertNotNull(enableGroupResult.getData());
        assertEquals(false, enableGroupResult.getData().getDisabled());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取 App 中的群组
     * <p>
     * 分页获取应用下的群组的信息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96-app-%E4%B8%AD%E7%9A%84%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppGroupsTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMGetAppGroupsResult getAppGroupsResult =
                assertDoesNotThrow(() -> api.getAppGroups(1, null));
        assertNotNull(getAppGroupsResult);
        assertNotNull(getAppGroupsResult.getData());
        assertNotNull(getAppGroupsResult.getData());
        assertEquals(1, getAppGroupsResult.getData().size());
        assertNotNull(getAppGroupsResult.getCursor());

        String cursor = getAppGroupsResult.getCursor();
        EMGetAppGroupsResult getAppGroupsNextResult =
                assertDoesNotThrow(() -> api.getAppGroups(1, cursor));
        assertNotNull(getAppGroupsNextResult);
        assertNotNull(getAppGroupsNextResult.getData());
        assertNotNull(getAppGroupsNextResult.getData());
        assertEquals(1, getAppGroupsNextResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取群管理员列表
     * <p>
     * 获取群组管理员列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E7%BE%A4%E7%AE%A1%E7%90%86%E5%91%98%E5%88%97%E8%A1%A8
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupAdminListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        assertDoesNotThrow(() -> api.getGroupAdminList(groupId));

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取群组公告
     * <p>
     * 获取指定群组 ID 的群组公告。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E7%BE%A4%E7%BB%84%E5%85%AC%E5%91%8A
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupAnnouncementTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMModifyGroupAnnouncement modifyGroupAnnouncement = new EMModifyGroupAnnouncement();
        modifyGroupAnnouncement.setAnnouncement("new announcement");
        EMModifyGroupAnnouncementResult modifyGroupAnnouncementResult = assertDoesNotThrow(
                () -> api.modifyGroupAnnouncement(groupId, modifyGroupAnnouncement));
        assertNotNull(modifyGroupAnnouncementResult);
        assertNotNull(modifyGroupAnnouncementResult.getData());
        assertEquals(true, modifyGroupAnnouncementResult.getData().getResult());
        assertEquals(groupId, modifyGroupAnnouncementResult.getData().getId());

        EMGetGroupAnnouncementResult getGroupAnnouncementResult =
                assertDoesNotThrow(() -> api.getGroupAnnouncement(groupId));
        assertNotNull(getGroupAnnouncementResult);
        assertNotNull(getGroupAnnouncementResult.getData());
        assertEquals("new announcement", getGroupAnnouncementResult.getData().getAnnouncement());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 查询群组黑名单
     * <p>
     * 查询一个群组黑名单中的用户列表。黑名单中的用户无法查看该群组的信息，也无法收到该群组的消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%9F%A5%E8%AF%A2%E7%BE%A4%E7%BB%84%E9%BB%91%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        assertDoesNotThrow(() -> api.addUserToGroupBlockList(groupId, username2));

        EMGetGroupBlockListResult getGroupBlockListResult =
                assertDoesNotThrow(() -> api.getGroupBlockList(groupId));
        assertNotNull(getGroupBlockListResult);
        assertNotNull(getGroupBlockListResult.getData());
        assertEquals(1, getGroupBlockListResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取群组详情
     * <p>
     * 可以获取一个或多个群组的详情，最多可获取 100 个群组的详情。当获取多个群组的详情时，返回所有存在的群组的详情；对于不存在的群组，返回 “group id doesn’t exist”。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E7%BE%A4%E7%BB%84%E8%AF%A6%E6%83%85
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupInfoTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMGetGroupInfoResult getGroupInfoResult =
                assertDoesNotThrow(() -> api.getGroupInfo(groupId));
        assertNotNull(getGroupInfoResult);
        assertNotNull(getGroupInfoResult.getData());
        assertEquals(1, getGroupInfoResult.getData().size());
        assertEquals("元梦之星", getGroupInfoResult.getData().get(0).getDescription());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 分页获取群成员列表
     * <p>
     * 可以分页获取群组成员列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E7%AE%A1%E7%90%86%E7%BE%A4%E7%BB%84%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupMemberListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMGetGroupMemberListResult getGroupMemberListResult =
                assertDoesNotThrow(() -> api.getGroupMemberList(groupId, 1, 1));
        assertNotNull(getGroupMemberListResult);
        assertNotNull(getGroupMemberListResult.getData());
        assertEquals(1, getGroupMemberListResult.getData().size());

        EMGetGroupMemberListResult getGroupMemberListNextResult =
                assertDoesNotThrow(() -> api.getGroupMemberList(groupId, 2, 1));
        assertNotNull(getGroupMemberListNextResult);
        assertNotNull(getGroupMemberListNextResult.getData());
        assertEquals(1, getGroupMemberListNextResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取禁言列表
     * <p>
     * 获取当前群组的禁言用户列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E7%A6%81%E8%A8%80%E5%88%97%E8%A1%A8
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupMuteListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMMuteGroupMember muteGroupMember = new EMMuteGroupMember();
        muteGroupMember.setUsernames(Arrays.asList(username2));
        muteGroupMember.setMuteDuration(new BigDecimal(1000));
        EMMuteGroupMemberResult muteGroupMemberResult =
                assertDoesNotThrow(() -> api.muteGroupMember(groupId, muteGroupMember));
        assertNotNull(muteGroupMemberResult);
        assertNotNull(muteGroupMemberResult.getData());
        assertEquals(1, muteGroupMemberResult.getData().size());
        assertEquals(true, muteGroupMemberResult.getData().get(0).getResult());
        assertEquals(username2, muteGroupMemberResult.getData().get(0).getUser());

        EMGetGroupMuteListResult getGroupMuteListResult =
                assertDoesNotThrow(() -> api.getGroupMuteList(groupId));
        assertNotNull(getGroupMuteListResult);
        assertNotNull(getGroupMuteListResult.getData());
        assertEquals(1, getGroupMuteListResult.getData().size());
        assertEquals(username2, getGroupMuteListResult.getData().get(0).getUser());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取群组共享文件
     * <p>
     * 可以分页获取指定群组 ID 的群组共享文件。获取文件后，你可以根据响应中返回的文件 ID（file_id）调用 下载群组共享文件 接口下载文件，或调用 删除群组共享文件 接口删除文件。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E7%BE%A4%E7%BB%84%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupShareFileTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMUploadGroupShareFileResult uploadGroupShareFileResult = assertDoesNotThrow(
                () -> api.uploadGroupShareFile(groupId, new File(Objects.requireNonNull(
                        ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath())));
        assertNotNull(uploadGroupShareFileResult);
        assertNotNull(uploadGroupShareFileResult.getData());
        assertNotNull(uploadGroupShareFileResult.getData().getFileId());

        assertDoesNotThrow(
                () -> api.uploadGroupShareFile(groupId, new File(Objects.requireNonNull(
                        ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath())));

        EMGetGroupShareFileResult getGroupShareFileResult =
                assertDoesNotThrow(() -> api.getGroupShareFile(groupId, 1, 1));
        assertNotNull(getGroupShareFileResult);
        assertNotNull(getGroupShareFileResult.getData());
        assertNotNull(getGroupShareFileResult.getData());
        assertEquals(1, getGroupShareFileResult.getData().size());

        EMGetGroupShareFileResult getGroupShareFileNextResult =
                assertDoesNotThrow(() -> api.getGroupShareFile(groupId, 2, 1));
        assertNotNull(getGroupShareFileNextResult);
        assertNotNull(getGroupShareFileNextResult.getData());
        assertNotNull(getGroupShareFileNextResult.getData());
        assertEquals(1, getGroupShareFileNextResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 查询群组白名单
     * <p>
     * 查询群组白名单中的用户列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E6%9F%A5%E8%AF%A2%E7%BE%A4%E7%BB%84%E7%99%BD%E5%90%8D%E5%8D%95
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupWhiteListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        assertDoesNotThrow(() -> api.addUserToGroupWhiteList(groupId, username2));
        EMGetGroupWhiteListResult getGroupWhiteListResult =
                assertDoesNotThrow(() -> api.getGroupWhiteList(groupId));
        assertNotNull(getGroupWhiteListResult);
        assertNotNull(getGroupWhiteListResult.getData());
        assertEquals(2, getGroupWhiteListResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 获取单个用户加入的所有群组
     * <p>
     * 根据用户 ID 分页获取指定用户加入的所有群组。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8A%A0%E5%85%A5%E7%9A%84%E6%89%80%E6%9C%89%E7%BE%A4%E7%BB%84
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserJoinedGroupsTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMGetUserJoinedGroupsResult getUserJoinedGroupsResult =
                assertDoesNotThrow(() -> api.getUserJoinedGroups(username1, 0, 1));
        assertNotNull(getUserJoinedGroupsResult);
        assertNotNull(getUserJoinedGroupsResult.getEntities());
        assertEquals(1, getUserJoinedGroupsResult.getEntities().size());
        assertEquals(1, getUserJoinedGroupsResult.getTotal());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 修改群组信息
     * <p>
     * 修改指定的群组信息，可修改 groupname、description、maxusers、membersonly、allowinvites、invite_need_confirm、public 和 custom 属性。如果传入其他字段，或传入的字段不存在，则不能修改的字段会抛出异常。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%BF%AE%E6%94%B9%E7%BE%A4%E7%BB%84%E4%BF%A1%E6%81%AF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMModifyGroup modifyGroup = new EMModifyGroup();
        modifyGroup.setGroupname("元梦之星");
        modifyGroup.setMaxusers(500);
        EMModifyGroupResult modifyGroupResult =
                assertDoesNotThrow(() -> api.modifyGroup(groupId, modifyGroup));
        assertNotNull(modifyGroupResult);
        assertNotNull(modifyGroupResult.getData());
        Map<String, Boolean> data = (Map<String, Boolean>) modifyGroupResult.getData();
        assertEquals(true, data.get("groupname"));
        assertEquals(true, data.get("maxusers"));

        EMModifyGroup modifyGroupOwner = new EMModifyGroup();
        modifyGroupOwner.setNewowner(username2);
        EMModifyGroupResult modifyGroupOwnerResult =
                assertDoesNotThrow(() -> api.modifyGroup(groupId, modifyGroupOwner));
        assertNotNull(modifyGroupOwnerResult);
        assertNotNull(modifyGroupOwnerResult.getData());
        Map<String, Boolean> modifyGroupOwnerData = (Map<String, Boolean>) modifyGroupOwnerResult.getData();
        assertEquals(true, modifyGroupOwnerData.get("newowner"));

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 修改群组公告
     * <p>
     * 修改指定群组 ID 的群组公告。群组公告不能超过 512 个字符。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%BF%AE%E6%94%B9%E7%BE%A4%E7%BB%84%E5%85%AC%E5%91%8A
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyGroupAnnouncementTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMModifyGroupAnnouncement modifyGroupAnnouncement = new EMModifyGroupAnnouncement();
        modifyGroupAnnouncement.setAnnouncement("new announcement");
        EMModifyGroupAnnouncementResult modifyGroupAnnouncementResult = assertDoesNotThrow(
                () -> api.modifyGroupAnnouncement(groupId, modifyGroupAnnouncement));
        assertNotNull(modifyGroupAnnouncementResult);
        assertNotNull(modifyGroupAnnouncementResult.getData());
        assertEquals(true, modifyGroupAnnouncementResult.getData().getResult());
        assertEquals(groupId, modifyGroupAnnouncementResult.getData().getId());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 禁言全体群成员
     * <p>
     * 对所有群组成员一键禁言，即将群组的所有成员加入禁言列表。设置群组全员禁言后，仅群组白名单中的用户可在群组以及该群组下的子区内发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E7%A6%81%E8%A8%80%E5%85%A8%E4%BD%93%E7%BE%A4%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void muteAllGroupMembersTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMMuteAllGroupMembersResult muteAllGroupMembersResult =
                assertDoesNotThrow(() -> api.muteAllGroupMembers(groupId));
        assertNotNull(muteAllGroupMembersResult);
        assertNotNull(muteAllGroupMembersResult.getData());
        assertEquals(true, muteAllGroupMembersResult.getData().getMute());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 禁言指定群成员
     * <p>
     * 对一个或多个群成员禁言。你一次最多可禁言 60 个群组成员。群成员被禁言后，将无法在群组中发送消息，也无法在该群组下的子区中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E7%A6%81%E8%A8%80%E6%8C%87%E5%AE%9A%E7%BE%A4%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void muteGroupMemberTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();
        EMMuteGroupMember muteGroupMember = new EMMuteGroupMember();
        muteGroupMember.setMuteDuration(new BigDecimal(1000));
        muteGroupMember.setUsernames(Arrays.asList(username2));
        EMMuteGroupMemberResult muteGroupMemberResult =
                assertDoesNotThrow(() -> api.muteGroupMember(groupId, muteGroupMember));
        assertNotNull(muteGroupMemberResult);
        assertNotNull(muteGroupMemberResult.getData());
        assertEquals(true, muteGroupMemberResult.getData().get(0).getResult());
        assertEquals(username2, muteGroupMemberResult.getData().get(0).getUser());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 移除群管理员
     * <p>
     * 将用户的角色从群管理员降为群普通成员。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E7%A7%BB%E9%99%A4%E7%BE%A4%E7%AE%A1%E7%90%86%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupAdminTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMAddGroupAdmin addGroupAdmin = new EMAddGroupAdmin();
        addGroupAdmin.newadmin(username2);
        assertDoesNotThrow(() -> api.addGroupAdmin(groupId, addGroupAdmin));

        EMRemoveGroupAdminResult removeGroupAdminResult =
                assertDoesNotThrow(() -> api.removeGroupAdmin(groupId, username2));
        assertNotNull(removeGroupAdminResult);
        assertNotNull(removeGroupAdminResult.getData());
        assertEquals("success", removeGroupAdminResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 从群组黑名单移除单个用户
     * <p>
     * 将指定用户移出群组黑名单。对于群组黑名单中的用户，如果需要将其再次加入群组，需要先将其从群组黑名单中移除。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%BB%8E%E7%BE%A4%E7%BB%84%E9%BB%91%E5%90%8D%E5%8D%95%E7%A7%BB%E9%99%A4%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromGroupBlockListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        assertDoesNotThrow(() -> api.addUserToGroupBlockList(groupId, username2));

        EMRemoveUserFromGroupBlockListResult removeUserFromGroupBlockListResult =
                assertDoesNotThrow(() -> api.removeUserFromGroupBlockList(groupId, username2));
        assertNotNull(removeUserFromGroupBlockListResult);
        assertNotNull(removeUserFromGroupBlockListResult.getData());
        assertEquals(true, removeUserFromGroupBlockListResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 从群组白名单移除用户
     * <p>
     * 将指定用户从群组白名单中移除。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%BB%8E%E7%BE%A4%E7%BB%84%E7%99%BD%E5%90%8D%E5%8D%95%E7%A7%BB%E9%99%A4%E7%94%A8%E6%88%B7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserFromGroupWhiteListTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        assertDoesNotThrow(() -> api.addUserToGroupWhiteList(groupId, username2));

        EMRemoveUserFromGroupWhiteListResult removeUserFromGroupWhiteListResult =
                assertDoesNotThrow(() -> api.removeUserFromGroupWhiteList(groupId, username2));
        assertNotNull(removeUserFromGroupWhiteListResult);
        assertNotNull(removeUserFromGroupWhiteListResult.getData());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 移除单个群组成员
     * <p>
     * 从群中移除指定成员。如果被移除用户不是群成员，将移除失败，并返回错误。移除后，该成员也会被移除其在该群组中加入的子区。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E7%A7%BB%E9%99%A4%E5%8D%95%E4%B8%AA%E7%BE%A4%E7%BB%84%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUserToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMRemoveUserToGroupResult removeUserToGroupResult =
                assertDoesNotThrow(() -> api.removeUserToGroup(groupId, username2));
        assertNotNull(removeUserToGroupResult);
        assertNotNull(removeUserToGroupResult.getData());
        assertEquals(true, removeUserToGroupResult.getData().getResult());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 批量移除群组成员
     * <p>
     * 一次移除多名群成员。如果所有被移除用户均不是群成员，将移除失败，并返回错误。移除后，这些成员也会被移除其在该群组中加入的子区。文档介绍：https://doc.easemob.com/document/server-side/group.html#%E6%89%B9%E9%87%8F%E7%A7%BB%E9%99%A4%E7%BE%A4%E7%BB%84%E6%88%90%E5%91%98
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeUsersToGroupTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2, username3));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        EMRemoveUsersToGroupResult removeUsersToGroupResult =
                assertDoesNotThrow(() -> api.removeUsersToGroup(groupId, Arrays.asList(username2, username3)));
        assertNotNull(removeUsersToGroupResult);
        assertNotNull(removeUsersToGroupResult.getData());
        assertEquals(2, removeUsersToGroupResult.getData().size());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 解除全员禁言
     * <p>
     * 一键取消对群组全体成员的禁言。解除禁言后，群成员可以在群组和该群组下的子区中正常发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E8%A7%A3%E9%99%A4%E5%85%A8%E5%91%98%E7%A6%81%E8%A8%80
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unmuteAllGroupMembersTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        assertDoesNotThrow(() -> api.addUserToGroupWhiteList(groupId, username2));

        EMUnmuteAllGroupMembersResult unmuteAllGroupMembersResult =
                assertDoesNotThrow(() -> api.unmuteAllGroupMembers(groupId));
        assertNotNull(unmuteAllGroupMembersResult);
        assertNotNull(unmuteAllGroupMembersResult.getData());
        assertEquals(false, unmuteAllGroupMembersResult.getData().getMute());

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

    /**
     * 上传群组共享文件
     * <p>
     * 上传指定群组 ID 的群组共享文件。注意上传的文件大小不能超过 10 MB。分页获取指定群组 ID 的群组共享文件，然后可以根据响应中返回的文件 ID（file_id）调用 下载群组共享文件 接口下载该文件，或调用 删除群组共享文件 接口删除该文件。文档介绍：https://docs-im-beta.easemob.com/document/server-side/group.html#%E4%B8%8A%E4%BC%A0%E7%BE%A4%E7%BB%84%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadGroupShareFileTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> userApi.createUsers(emCreateUserList));

        EMCreateGroup createGroup = new EMCreateGroup();
        createGroup.setOwner(username1);
        createGroup.setGroupname("test-group");
        createGroup.setDescription("元梦之星");
        createGroup.setMaxusers(200);
        createGroup.setMembers(Arrays.asList(username2));
        createGroup.setPublic(true);

        EMCreateGroupResult createGroupResult =
                assertDoesNotThrow(() -> api.createGroup(createGroup));
        assertNotNull(createGroupResult);
        assertNotNull(createGroupResult.getData());
        assertNotNull(createGroupResult.getData().getGroupid());

        String groupId = createGroupResult.getData().getGroupid();

        assertDoesNotThrow(() -> api.addUserToGroupWhiteList(groupId, username2));

        EMUploadGroupShareFileResult uploadGroupShareFileResult = assertDoesNotThrow(
                () -> api.uploadGroupShareFile(groupId, new File(Objects.requireNonNull(
                        ClassLoaderUtils.getDefaultClassLoader().getResource("upload/blue.png")).getPath())));
        assertNotNull(uploadGroupShareFileResult);
        assertNotNull(uploadGroupShareFileResult.getData());
        assertNotNull(uploadGroupShareFileResult.getData().getFileId());

        String fileId = uploadGroupShareFileResult.getData().getFileId();

        assertDoesNotThrow(() -> api.deleteGroupShareFile(groupId, fileId));

        assertDoesNotThrow(() -> userApi.deleteUser(username1));
        assertDoesNotThrow(() -> userApi.deleteUser(username2));
        try {
            api.deleteGroup(groupId);
        } catch (ApiException ignored) {
        }
    }

}
