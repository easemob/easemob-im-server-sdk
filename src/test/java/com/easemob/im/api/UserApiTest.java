/*
 * EMService
 * Easemob Rest API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.easemob.im.api;

import com.easemob.im.ApiException;
import com.easemob.im.api.model.*;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

/**
 * API tests for UserApi
 */
public class UserApiTest extends AbstractTest {

    private final UserApi api = new UserApi();

    public UserApiTest() {
    }

    /**
     * 批量注册用户
     * <p>
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E6%B3%A8%E5%86%8C%E7%94%A8%E6%88%B7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUsersTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String username3 = randomUserName();
        String password = "123456";
        String pushNickname = "推送昵称";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);
        createUser1.setNickname(pushNickname);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);
        createUser2.setNickname(pushNickname);

        EMCreateUser createUser3 = new EMCreateUser();
        createUser3.setUsername(username3);
        createUser3.setPassword(password);
        createUser2.setNickname(pushNickname);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);
        emCreateUserList.add(createUser3);

        EMCreateUsersResult result = assertDoesNotThrow(() -> api.createUsers(emCreateUserList));
        assertNotNull(result.getEntities());
        assertNotNull(result.getEntities().get(0));
        assertEquals(pushNickname, result.getEntities().get(0).getNickname());
        assertEquals(3, result.getEntities().size());

        assertDoesNotThrow(() -> api.deleteUser(username1));
        assertDoesNotThrow(() -> api.deleteUser(username2));
        assertDoesNotThrow(() -> api.deleteUser(username3));
    }

    /**
     * 删除用户账号
     * <p>
     * 删除单个用户。如果该用户是群主或者聊天室所有者，系统会同时删除对应的群组和聊天室。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%88%A0%E9%99%A4%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);
        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));
        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 批量删除用户
     * <p>
     * 删除某个 App 下指定数量的用户账号。建议一次删除的用户数量不要超过100。需要注意的是，这里只指定了要删除的用户数量，并未指定要删除的具体用户，你可以在响应中查看删除的用户。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUsersTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        Integer limit = 1;
        EMDeleteUsersResult result = assertDoesNotThrow(() -> api.deleteUsers(limit, null));
        assertDoesNotThrow(() -> api.deleteUsers(limit, result.getCursor()));
    }

    /**
     * 强制下线
     * <p>
     * 强制用户即将用户状态改为离线，用户需要重新登录才能正常使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E5%BC%BA%E5%88%B6%E4%B8%8B%E7%BA%BF
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forceUserLogoutTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);
        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMForceUserLogoutResult result = assertDoesNotThrow(() -> api.forceUserLogout(username));
        assertNotNull(result.getData());
        assertEquals(true, result.getData().getResult());
        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 查询 app 下的所有全局禁言的用户
     * <p>
     * 该方法查询 app 下所有全局禁言的用户及其禁言剩余时间。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2-app-%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80%E7%9A%84%E7%94%A8%E6%88%B7
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllGloballyMutedUsersTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMSetUserGlobalMute emSetUserGlobalMute1 = new EMSetUserGlobalMute();
        emSetUserGlobalMute1.username(username1);
        emSetUserGlobalMute1.chat(1000);

        EMSetUserGlobalMute emSetUserGlobalMute2 = new EMSetUserGlobalMute();
        emSetUserGlobalMute2.username(username2);
        emSetUserGlobalMute2.chat(1000);

        EMSetUserGlobalMuteResult emSetUserGlobalMuteResult =
                assertDoesNotThrow(() -> api.setUserGlobalMute(emSetUserGlobalMute1));
        assertNotNull(emSetUserGlobalMuteResult.getData());
        assertEquals("ok", emSetUserGlobalMuteResult.getData().getResult());
        assertDoesNotThrow(() -> api.setUserGlobalMute(emSetUserGlobalMute2));

        EMGetAllGloballyMutedUsersResult result =
                assertDoesNotThrow(() -> api.getAllGloballyMutedUsers(1, 10));
        assertNotNull(result.getData());
        assertNotNull(result.getData().getData());

        assertDoesNotThrow(() -> api.deleteUser(username1));
        assertDoesNotThrow(() -> api.deleteUser(username2));
    }

    /**
     * 获取指定离线消息的投递状态
     * <p>
     * 获取用户的指定离线消息的投递状态，即查看该消息是否已投递。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E7%9A%84%E6%8A%95%E9%80%92%E7%8A%B6%E6%80%81
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOfflineMessageStatusTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetOfflineMessageStatusResult result =
                assertDoesNotThrow(() -> api.getOfflineMessageStatus(username1, "12903244353"));
        assertNotNull(result.getData());

        assertDoesNotThrow(() -> api.deleteUser(username1));
        assertDoesNotThrow(() -> api.deleteUser(username2));
    }

    /**
     * 获取用户详情
     * <p>
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E7%9A%84%E8%AF%A6%E6%83%85
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";
        String pushNickname = "推送昵称";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);
        createUser.setNickname(pushNickname);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetUserResult result = assertDoesNotThrow(() -> api.getUser(username));
        assertNotNull(result.getEntities());
        assertEquals(username, result.getEntities().get(0).getUsername());
        assertEquals(true, result.getEntities().get(0).getActivated());
        assertEquals(pushNickname, result.getEntities().get(0).getNickname());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 查询单个用户 ID 全局禁言
     * <p>
     * 查询单个用户的单聊、群聊和聊天室的全局禁言详情。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%9F%A5%E8%AF%A2%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7-id-%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserGlobalMuteTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMSetUserGlobalMute emSetUserGlobalMute = new EMSetUserGlobalMute();
        emSetUserGlobalMute.username(username);
        emSetUserGlobalMute.chat(1000);

        EMSetUserGlobalMuteResult emSetUserGlobalMuteResult =
                assertDoesNotThrow(() -> api.setUserGlobalMute(emSetUserGlobalMute));
        assertNotNull(emSetUserGlobalMuteResult.getData());
        assertEquals("ok", emSetUserGlobalMuteResult.getData().getResult());

        EMGetUserGlobalMuteResult result =
                assertDoesNotThrow(() -> api.getUserGlobalMute(username));
        assertNotNull(result.getData());
        assertNotNull(result.getData().getChat());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 获取用户离线消息数量
     * <p>
     * 文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%A6%BB%E7%BA%BF%E6%B6%88%E6%81%AF%E6%95%B0%E9%87%8F
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserOfflineMessageCountTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetUserOfflineMessageCountResult result =
                assertDoesNotThrow(() -> api.getUserOfflineMessageCount(username));
        assertNotNull(result.getData());
        Map map = (Map) result.getData();
        assertEquals(0, ((Number) map.get(username)).intValue());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 获取指定账号的在线登录设备列表
     * <p>
     * 多设备登录情况下，你可以调用该接口获取指定账号的在线登录设备列表。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%B4%A6%E5%8F%B7%E7%9A%84%E5%9C%A8%E7%BA%BF%E7%99%BB%E5%BD%95%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserOnlineLoginDeviceListTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetUserOnlineLoginDeviceListResult result =
                assertDoesNotThrow(() -> api.getUserOnlineLoginDeviceList(username));
        assertNotNull(result.getData());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 获取单个用户在线状态
     * <p>
     * 查看单个用户是在线还是离线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%8E%B7%E5%8F%96%E5%8D%95%E4%B8%AA%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserOnlineStateTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetUserOnlineStateResult result =
                assertDoesNotThrow(() -> api.getUserOnlineState(username));
        assertNotNull(result.getData());
        assertEquals("offline", ((Map) result.getData()).get(username));

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 获取用户列表
     * <p>
     * 该接口查询多个用户的信息列表，按照用户创建时间顺序返回。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E8%AF%A6%E6%83%85
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetUsersResult result =
                assertDoesNotThrow(() -> api.getUsers(1, null));
        assertNotNull(result.getEntities());

        assertDoesNotThrow(() -> api.getUsers(1, result.getCursor()));

        assertDoesNotThrow(() -> api.deleteUser(username1));
        assertDoesNotThrow(() -> api.deleteUser(username2));
    }

    /**
     * 批量获取用户在线状态
     * <p>
     * 批量查看用户是在线还是离线状态，单次请求最多可查看 100 个用户的在线状态。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E6%89%B9%E9%87%8F%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersOnlineStateTest() throws ApiException {
        String username1 = randomUserName();
        String username2 = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        EMCreateUser createUser2 = new EMCreateUser();
        createUser2.setUsername(username2);
        createUser2.setPassword(password);

        emCreateUserList.add(createUser1);
        emCreateUserList.add(createUser2);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMGetUsersOnlineState emGetUsersOnlineState = new EMGetUsersOnlineState();
        emGetUsersOnlineState.addUsernamesItem(username1);
        emGetUsersOnlineState.addUsernamesItem(username2);

        EMGetUsersOnlineStateResult result =
                assertDoesNotThrow(() -> api.getUsersOnlineState(emGetUsersOnlineState));
        assertNotNull(result.getData());
        assertEquals(2, result.getData().size());

        assertDoesNotThrow(() -> api.deleteUser(username1));
        assertDoesNotThrow(() -> api.deleteUser(username2));
    }

    /**
     * 修改用户密码
     * <p>
     * 通过服务端接口修改用户的登录密码，不需要提供原密码。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%AF%86%E7%A0%81
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyUserPasswordTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMModifyUserPassword emModifyUserPassword = new EMModifyUserPassword();
        emModifyUserPassword.setNewpassword("456789");

        assertDoesNotThrow(() -> api.modifyUserPassword(username, emModifyUserPassword));

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 设置用户全局禁言
     * <p>
     * 设置单个用户 ID 的单聊、群组或聊天室消息的全局禁言。设置成功后，该用户将无法在对应的单聊、群组或聊天室中发送消息。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E7%94%A8%E6%88%B7%E5%85%A8%E5%B1%80%E7%A6%81%E8%A8%80
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserGlobalMuteTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        EMSetUserGlobalMute emSetUserGlobalMute = new EMSetUserGlobalMute();
        emSetUserGlobalMute.setUsername(username);
        emSetUserGlobalMute.setChat(1000);

        EMSetUserGlobalMuteResult result =
                assertDoesNotThrow(() -> api.setUserGlobalMute(emSetUserGlobalMute));
        assertNotNull(result.getData());
        assertEquals("ok", result.getData().getResult());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 账号解禁
     * <p>
     * 被解禁后用户才能恢复登录。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E8%A7%A3%E7%A6%81
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userActivateTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        assertDoesNotThrow(() -> api.userActivate(username));
        EMGetUserResult result = assertDoesNotThrow(() -> api.getUser(username));
        assertNotNull(result.getEntities());
        assertEquals(true, result.getEntities().get(0).getActivated());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 账号封禁
     * <p>
     * 环信即时通讯 IM 提供了对用户的禁用以及解禁接口操作，用户若被禁用将立即下线并无法登录进入环信即时通讯 IM，直到被解禁后才能恢复登录。常用在对异常用户的即时处理场景使用。文档介绍：https://docs-im-beta.easemob.com/document/server-side/account_system.html#%E8%B4%A6%E5%8F%B7%E5%B0%81%E7%A6%81
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDeactivateTest() throws ApiException {
        String username = randomUserName();
        String password = "123456";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        emCreateUserList.add(createUser);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        assertDoesNotThrow(() -> api.userDeactivate(username));
        EMGetUserResult result = assertDoesNotThrow(() -> api.getUser(username));
        assertNotNull(result.getEntities());
        assertEquals(false, result.getEntities().get(0).getActivated());

        assertDoesNotThrow(() -> api.deleteUser(username));
    }

    /**
     * 批量修改用户推送昵称
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modifyPushNicknamesTest() throws ApiException {
        String username = randomUserName();
        String username1 = randomUserName();
        String password = "123456";
        String pushNickname = "推送昵称";

        List<EMCreateUser> emCreateUserList = new ArrayList<>();
        EMCreateUser createUser = new EMCreateUser();
        createUser.setUsername(username);
        createUser.setPassword(password);

        EMCreateUser createUser1 = new EMCreateUser();
        createUser1.setUsername(username1);
        createUser1.setPassword(password);

        emCreateUserList.add(createUser);
        emCreateUserList.add(createUser1);

        assertDoesNotThrow(() -> api.createUsers(emCreateUserList));

        List<EMModifyPushNickname> modifyPushNicknames = new ArrayList<>();
        EMModifyPushNickname modifyPushNickname = new EMModifyPushNickname();
        modifyPushNickname.setUsername(username);
        modifyPushNickname.setPushNickname(pushNickname);

        EMModifyPushNickname modifyPushNickname1 = new EMModifyPushNickname();
        modifyPushNickname1.setUsername(username1);
        modifyPushNickname1.setPushNickname(pushNickname);

        modifyPushNicknames.add(modifyPushNickname);
        modifyPushNicknames.add(modifyPushNickname1);

        EMModifyPushNicknamesResult result = assertDoesNotThrow(() -> api.modifyPushNicknames(modifyPushNicknames));
        assertNotNull(result.getEntities());
        assertEquals(2, result.getEntities().size());
        assertEquals(pushNickname, result.getEntities().get(0).getPushNickname());
        assertEquals(pushNickname, result.getEntities().get(1).getPushNickname());

        EMGetUserResult getUserResult = assertDoesNotThrow(() -> api.getUser(username));
        assertNotNull(getUserResult.getEntities());
        assertEquals(pushNickname, getUserResult.getEntities().get(0).getNickname());

        assertDoesNotThrow(() -> api.deleteUser(username));
        assertDoesNotThrow(() -> api.deleteUser(username1));
    }

}
